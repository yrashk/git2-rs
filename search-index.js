var searchIndex = {};
searchIndex["git2"] = {"doc":"libgit2 bindings for Rust","items":[[3,"Blame","git2","Opaque structure to hold blame results.",null,null],[3,"BlameHunk","","Structure that represents a blame hunk.",null,null],[3,"BlameIter","","An iterator over the hunks in a blame.",null,null],[3,"BlameOptions","","Blame options",null,null],[3,"Blob","","A structure to represent a git [blob][1]",null,null],[3,"BlobWriter","","A structure to represent a git writestream for blobs",null,null],[3,"Branch","","A structure to represent a git [branch][1]",null,null],[3,"Branches","","An iterator over the branches inside of a repository.",null,null],[3,"Buf","","A structure to wrap an intermediate buffer used by libgit2.",null,null],[3,"Commit","","A structure to represent a git [commit][1]",null,null],[3,"Parents","","An iterator over the parent commits of a commit.",null,null],[3,"Config","","A structure representing a git configuration key/value store",null,null],[3,"ConfigEntry","","A struct representing a certain entry owned by a `Config` instance.",null,null],[3,"ConfigEntries","","An iterator over the `ConfigEntry` values of a `Config` structure.",null,null],[3,"Cred","","A structure to represent git credentials in libgit2.",null,null],[3,"CredentialHelper","","Management of the gitcredentials(7) interface.",null,null],[12,"username","","A public field representing the currently discovered username from configuration.",0,null],[3,"Describe","","The result of a `describe` operation on either an `Describe` or a `Repository`.",null,null],[3,"DescribeFormatOptions","","Options which can be used to customize how a description is formatted.",null,null],[3,"DescribeOptions","","Options which indicate how a `Describe` is created.",null,null],[3,"Diff","","The diff object that contains all individual file deltas.",null,null],[3,"DiffDelta","","Description of changes to one entry.",null,null],[3,"DiffFile","","Description of one side of a delta.",null,null],[3,"DiffOptions","","Structure describing options about how the diff should be executed.",null,null],[3,"Deltas","","An iterator over the diffs in a delta",null,null],[3,"DiffBinary","","Structure describing the binary contents of a diff.",null,null],[3,"DiffBinaryFile","","The contents of one of the files in a binary diff.",null,null],[3,"DiffLine","","Structure describing a line (or data span) of a diff.",null,null],[3,"DiffHunk","","Structure describing a hunk of a diff.",null,null],[3,"DiffStats","","Structure describing a hunk of a diff.",null,null],[3,"DiffFindOptions","","Control behavior of rename and copy detection",null,null],[3,"Error","","A structure to represent errors coming out of libgit2.",null,null],[3,"Index","","A structure to represent a git [index][1]",null,null],[3,"IndexEntry","","A structure to represent an entry or a file inside of an index.",null,null],[12,"ctime","","",1,null],[12,"mtime","","",1,null],[12,"dev","","",1,null],[12,"ino","","",1,null],[12,"mode","","",1,null],[12,"uid","","",1,null],[12,"gid","","",1,null],[12,"file_size","","",1,null],[12,"id","","",1,null],[12,"flags","","",1,null],[12,"flags_extended","","",1,null],[12,"path","","",1,null],[3,"IndexEntries","","An iterator over the entries in an index",null,null],[3,"AnnotatedCommit","","A structure to represent an annotated commit, the input to merge and rebase.",null,null],[3,"MergeOptions","","Options to specify when merging.",null,null],[3,"Note","","A structure representing a [note][note] in git.",null,null],[3,"Notes","","An iterator over all of the notes within a repository.",null,null],[3,"Object","","A structure to represent a git [object][1]",null,null],[3,"Oid","","Unique identity of any object (commit, tree, blob, tag).",null,null],[3,"PackBuilder","","A builder for creating a packfile",null,null],[3,"Pathspec","","Structure representing a compiled pathspec used for matching against various structures.",null,null],[3,"PathspecMatchList","","List of filenames matching a pathspec.",null,null],[3,"PathspecFailedEntries","","Iterator over the failed list of pathspec items that did not match.",null,null],[3,"PathspecDiffEntries","","Iterator over the matching diff deltas.",null,null],[3,"PathspecEntries","","Iterator over the matched paths in a pathspec.",null,null],[3,"Patch","","A structure representing the text changes in a single diff delta.",null,null],[3,"ProxyOptions","","Options which can be specified to various fetch operations.",null,null],[3,"Reference","","A structure to represent a git [reference][1].",null,null],[3,"References","","An iterator over the references in a repository.",null,null],[3,"ReferenceNames","","An iterator over the names of references in a repository.",null,null],[3,"Reflog","","A reference log of a git repository.",null,null],[3,"ReflogEntry","","An entry inside the reflog of a repository",null,null],[3,"ReflogIter","","An iterator over the entries inside of a reflog.",null,null],[3,"Refspec","","A structure to represent a git [refspec][1].",null,null],[3,"Remote","","A structure representing a [remote][1] of a git repository.",null,null],[3,"RemoteConnection","","Holds callbacks for a connection to a `Remote`. Disconnects when dropped",null,null],[3,"Refspecs","","An iterator over the refspecs that a remote contains.",null,null],[3,"RemoteHead","","Description of a reference advertised bya remote server, given out on calls to `list`.",null,null],[3,"FetchOptions","","Options which can be specified to various fetch operations.",null,null],[3,"PushOptions","","Options to control the behavior of a git push.",null,null],[3,"RemoteCallbacks","","A structure to contain the callbacks which are invoked when a repository is being updated or downloaded.",null,null],[3,"Progress","","Struct representing the progress by an in-flight transfer.",null,null],[3,"Repository","","An owned git repository, representing all state associated with the underlying filesystem.",null,null],[3,"RepositoryInitOptions","","Options which can be used to configure how a repository is initialized",null,null],[3,"Revspec","","A revspec represents a range of revisions within a repository.",null,null],[3,"Revwalk","","A revwalk allows traversal of the commit graph defined by including one or more leaves and excluding one or more roots.",null,null],[3,"Signature","","A Signature is used to indicate authorship of various actions throughout the library.",null,null],[3,"StatusOptions","","Options that can be provided to `repo.statuses()` to control how the status information is gathered.",null,null],[3,"Statuses","","A container for a list of status information about a repository.",null,null],[3,"StatusIter","","An iterator over the statuses in a `Statuses` instance.",null,null],[3,"StatusEntry","","A structure representing an entry in the `Statuses` structure.",null,null],[3,"StashApplyOptions","","Stash application options structure",null,null],[3,"Submodule","","A structure to represent a git [submodule][1]",null,null],[3,"SubmoduleUpdateOptions","","Options to update a submodule.",null,null],[3,"Tag","","A structure to represent a git [tag][1]",null,null],[3,"Time","","Time in a signature",null,null],[3,"IndexTime","","Time structure used in a git index entry.",null,null],[3,"Tree","","A structure to represent a git [tree][1]",null,null],[3,"TreeEntry","","A structure representing an entry inside of a tree. An entry is borrowed from a tree.",null,null],[3,"TreeIter","","An iterator over the entries in a tree.",null,null],[3,"TreeBuilder","","Constructor for in-memory trees",null,null],[3,"Odb","","A structure to represent a git object database",null,null],[3,"OdbObject","","An object from the Object Database.",null,null],[3,"OdbReader","","A structure to represent a git ODB rstream",null,null],[3,"OdbWriter","","A structure to represent a git ODB wstream",null,null],[3,"Sort","","Orderings that may be specified for Revwalk iteration.",null,null],[3,"CredentialType","","Types of credentials that can be requested by a credential callback.",null,null],[3,"IndexEntryFlag","","Flags for the `flags` field of an IndexEntry.",null,null],[3,"IndexEntryExtendedFlag","","Flags for the `extended_flags` field of an IndexEntry.",null,null],[3,"IndexAddOption","","Flags for APIs that add files matching pathspec",null,null],[3,"RepositoryOpenFlags","","Flags for `Repository::open_ext`",null,null],[3,"RevparseMode","","Flags for the return value of `Repository::revparse`",null,null],[3,"MergeAnalysis","","The results of `merge_analysis` indicating the merge opportunities.",null,null],[3,"MergePreference","","The user's stated preference for merges.",null,null],[3,"Status","","Status flags for a single file",null,null],[3,"RepositoryInitMode","","Mode options for RepositoryInitOptions",null,null],[3,"SubmoduleStatus","","Return codes for submodule status.",null,null],[3,"PathspecFlags","","...",null,null],[3,"CheckoutNotificationType","","Types of notifications emitted from checkouts.",null,null],[3,"DiffStatsFormat","","Formatting options for diff stats",null,null],[3,"StashApplyFlags","","",null,null],[3,"StashFlags","","",null,null],[4,"DiffBinaryKind","","When producing a binary diff, the binary data returned will be either the deflated full (\"literal\") contents of the file, or the deflated binary delta between the two sides (whichever is smaller).",null,null],[13,"None","","There is no binary delta",2,null],[13,"Literal","","The binary data is the literal contents of the file",2,null],[13,"Delta","","The binary data is the delta from one side to the other",2,null],[4,"PackBuilderStage","","Stages that are reported by the `PackBuilder` progress callback.",null,null],[13,"AddingObjects","","Adding objects to the pack",3,null],[13,"Deltafication","","Deltafication of the pack",3,null],[4,"StatusShow","","Enumeration of possible methods of what can be shown through a status operation.",null,null],[13,"Index","","Only gives status based on HEAD to index comparison, not looking at working directory changes.",4,null],[13,"Workdir","","Only gives status based on index to working directory comparison, not comparing the index to the HEAD.",4,null],[13,"IndexAndWorkdir","","The default, this roughly matches `git status --porcelain` regarding which files are included and in what order.",4,null],[4,"ErrorCode","","An enumeration of possible errors that can happen when working with a git repository.",null,null],[13,"GenericError","","Generic error",5,null],[13,"NotFound","","Requested object could not be found",5,null],[13,"Exists","","Object exists preventing operation",5,null],[13,"Ambiguous","","More than one object matches",5,null],[13,"BufSize","","Output buffer too short to hold data",5,null],[13,"User","","User-generated error",5,null],[13,"BareRepo","","Operation not allowed on bare repository",5,null],[13,"UnbornBranch","","HEAD refers to branch with no commits",5,null],[13,"Unmerged","","Merge in progress prevented operation",5,null],[13,"NotFastForward","","Reference was not fast-forwardable",5,null],[13,"InvalidSpec","","Name/ref spec was not in a valid format",5,null],[13,"Conflict","","Checkout conflicts prevented operation",5,null],[13,"Locked","","Lock file prevented operation",5,null],[13,"Modified","","Reference value does not match expected",5,null],[13,"Auth","","Authentication error",5,null],[13,"Certificate","","Server certificate is invalid",5,null],[13,"Applied","","Patch/merge has already been applied",5,null],[13,"Peel","","The requested peel operation is not possible",5,null],[13,"Eof","","Unexpected EOF",5,null],[13,"Invalid","","Invalid operation or input",5,null],[13,"Uncommitted","","Uncommitted changes in index prevented operation",5,null],[13,"Directory","","Operation was not valid for a directory,",5,null],[4,"ErrorClass","","An enumeration of possible categories of things that can have errors when working with a git repository.",null,null],[13,"None","","Uncategorized",6,null],[13,"NoMemory","","Out of memory or insufficient allocated space",6,null],[13,"Os","","Syscall or standard system library error",6,null],[13,"Invalid","","Invalid input",6,null],[13,"Reference","","Error resolving or manipulating a reference",6,null],[13,"Zlib","","ZLib failure",6,null],[13,"Repository","","Bad repository state",6,null],[13,"Config","","Bad configuration",6,null],[13,"Regex","","Regex failure",6,null],[13,"Odb","","Bad object",6,null],[13,"Index","","Invalid index data",6,null],[13,"Object","","Error creating or obtaining an object",6,null],[13,"Net","","Network error",6,null],[13,"Tag","","Error manpulating a tag",6,null],[13,"Tree","","Invalid value in tree",6,null],[13,"Indexer","","Hashing or packing error",6,null],[13,"Ssl","","Error from SSL",6,null],[13,"Submodule","","Error involing submodules",6,null],[13,"Thread","","Threading error",6,null],[13,"Stash","","Error manipulating a stash",6,null],[13,"Checkout","","Checkout failure",6,null],[13,"FetchHead","","Invalid FETCH_HEAD",6,null],[13,"Merge","","Merge failure",6,null],[13,"Ssh","","SSH failure",6,null],[13,"Filter","","Error manipulating filters",6,null],[13,"Revert","","Error reverting commit",6,null],[13,"Callback","","Error from a user callback",6,null],[13,"CherryPick","","Error cherry-picking commit",6,null],[13,"Describe","","Can't describe object",6,null],[13,"Rebase","","Error during rebase",6,null],[13,"Filesystem","","Filesystem-related error",6,null],[4,"RepositoryState","","A listing of the possible states that a repository can be in.",null,null],[13,"Clean","","",7,null],[13,"Merge","","",7,null],[13,"Revert","","",7,null],[13,"RevertSequence","","",7,null],[13,"CherryPick","","",7,null],[13,"CherryPickSequence","","",7,null],[13,"Bisect","","",7,null],[13,"Rebase","","",7,null],[13,"RebaseInteractive","","",7,null],[13,"RebaseMerge","","",7,null],[13,"ApplyMailbox","","",7,null],[13,"ApplyMailboxOrRebase","","",7,null],[4,"Direction","","An enumeration of the possible directions for a remote.",null,null],[13,"Fetch","","Data will be fetched (read) from this remote.",8,null],[13,"Push","","Data will be pushed (written) to this remote.",8,null],[4,"ResetType","","An enumeration of the operations that can be performed for the `reset` method on a `Repository`.",null,null],[13,"Soft","","Move the head to the given commit.",9,null],[13,"Mixed","","Soft plus reset the index to the commit.",9,null],[13,"Hard","","Mixed plus changes in the working tree are discarded.",9,null],[4,"ObjectType","","An enumeration all possible kinds objects may have.",null,null],[13,"Any","","Any kind of git object",10,null],[13,"Commit","","An object which corresponds to a git commit",10,null],[13,"Tree","","An object which corresponds to a git tree",10,null],[13,"Blob","","An object which corresponds to a git blob",10,null],[13,"Tag","","An object which corresponds to a git tag",10,null],[4,"ReferenceType","","An enumeration of all possile kinds of references.",null,null],[13,"Oid","","A reference which points at an object id.",11,null],[13,"Symbolic","","A reference which points at another reference.",11,null],[4,"BranchType","","An enumeration for the possible types of branches",null,null],[13,"Local","","A local branch not on a remote.",12,null],[13,"Remote","","A branch for a remote.",12,null],[4,"ConfigLevel","","An enumeration of the possible priority levels of a config file.",null,null],[13,"ProgramData","","System-wide on Windows, for compatibility with portable git",13,null],[13,"System","","System-wide configuration file, e.g. /etc/gitconfig",13,null],[13,"XDG","","XDG-compatible configuration file, e.g. ~/.config/git/config",13,null],[13,"Global","","User-specific configuration, e.g. ~/.gitconfig",13,null],[13,"Local","","Repository specific config, e.g. $PWD/.git/config",13,null],[13,"App","","Application specific configuration file",13,null],[13,"Highest","","Highest level available",13,null],[4,"FileFavor","","Merge file favor options for `MergeOptions` instruct the file-level merging functionality how to deal with conflicting regions of the files.",null,null],[13,"Normal","","When a region of a file is changed in both branches, a conflict will be recorded in the index so that git_checkout can produce a merge file with conflict markers in the working directory. This is the default.",14,null],[13,"Ours","","When a region of a file is changed in both branches, the file created in the index will contain the \"ours\" side of any conflicting region. The index will not record a conflict.",14,null],[13,"Theirs","","When a region of a file is changed in both branches, the file created in the index will contain the \"theirs\" side of any conflicting region. The index will not record a conflict.",14,null],[13,"Union","","When a region of a file is changed in both branches, the file created in the index will contain each unique line from each side, which has the result of combining both files. The index will not record a conflict.",14,null],[4,"Delta","","What type of change is described by a `DiffDelta`?",null,null],[13,"Unmodified","","No changes",15,null],[13,"Added","","Entry does not exist in old version",15,null],[13,"Deleted","","Entry does not exist in new version",15,null],[13,"Modified","","Entry content changed between old and new",15,null],[13,"Renamed","","Entry was renamed between old and new",15,null],[13,"Copied","","Entry was copied from another old entry",15,null],[13,"Ignored","","Entry is ignored item in workdir",15,null],[13,"Untracked","","Entry is untracked item in workdir",15,null],[13,"Typechange","","Type of entry changed between old and new",15,null],[13,"Unreadable","","Entry is unreadable",15,null],[13,"Conflicted","","Entry in the index is conflicted",15,null],[4,"SubmoduleIgnore","","Submodule ignore values",null,null],[13,"Unspecified","","Use the submodule's configuration",16,null],[13,"None","","Any change or untracked file is considered dirty",16,null],[13,"Untracked","","Only dirty if tracked files have changed",16,null],[13,"Dirty","","Only dirty if HEAD has moved",16,null],[13,"All","","Never dirty",16,null],[4,"DiffFormat","","Possible output formats for diff data",null,null],[13,"Patch","","full git diff",17,null],[13,"PatchHeader","","just the headers of the patch",17,null],[13,"Raw","","like git diff --raw",17,null],[13,"NameOnly","","like git diff --name-only",17,null],[13,"NameStatus","","like git diff --name-status",17,null],[4,"AutotagOption","","Automatic tag following options.",null,null],[13,"Unspecified","","Use the setting from the remote's configuration",18,null],[13,"Auto","","Ask the server for tags pointing to objects we're already downloading",18,null],[13,"None","","Don't ask for any tags beyond the refspecs",18,null],[13,"All","","Ask for all the tags",18,null],[4,"FetchPrune","","Configuration for how pruning is done on a fetch",null,null],[13,"Unspecified","","Use the setting from the configuration",19,null],[13,"On","","Force pruning on",19,null],[13,"Off","","Force pruning off",19,null],[4,"StashApplyProgress","","",null,null],[13,"None","","None",20,null],[13,"LoadingStash","","Loading the stashed data from the object database",20,null],[13,"AnalyzeIndex","","The stored index is being analyzed",20,null],[13,"AnalyzeModified","","The modified files are being analyzed",20,null],[13,"AnalyzeUntracked","","The untracked and ignored files are being analyzed",20,null],[13,"CheckoutUntracked","","The untracked files are being written to disk",20,null],[13,"CheckoutModified","","The modified files are being written to disk",20,null],[13,"Done","","The stash was applied successfully",20,null],[5,"message_prettify","","Clean up a message, removing extraneous whitespace, and ensure that the message ends with a newline. If `comment_char` is `Some`, also remove comment lines starting with that character.",null,{"inputs":[{"name":"t"},{"generics":["u8"],"name":"option"}],"output":{"generics":["string","error"],"name":"result"}}],[0,"build","","Builder-pattern objects for configuration various git operations.",null,null],[3,"RepoBuilder","git2::build","A builder struct which is used to build configuration for cloning a new git repository.",null,null],[3,"CheckoutBuilder","","A builder struct for configuring checkouts of a repository.",null,null],[4,"CloneLocal","","Options that can be passed to `RepoBuilder::clone_local`.",null,null],[13,"Auto","","Auto-detect (default)",21,null],[13,"Local","","Bypass the git-aware transport even for `file://` urls.",21,null],[13,"None","","Never bypass the git-aware transport",21,null],[13,"NoLinks","","Bypass the git-aware transport, but don't try to use hardlinks.",21,null],[6,"RemoteCreate","","Type of callback passed to `RepoBuilder::remote_create`.",null,null],[6,"Progress","","Checkout progress notification callback.",null,null],[6,"Notify","","Checkout notifications callback.",null,null],[11,"default","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"clonelocal"}}],[11,"new","","Creates a new repository builder with all of the default configuration.",22,{"inputs":[],"output":{"name":"repobuilder"}}],[11,"bare","","Indicate whether the repository will be cloned as a bare repository or not.",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"repobuilder"}}],[11,"branch","","Specify the name of the branch to check out after the clone.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"repobuilder"}}],[11,"clone_local","","Configures options for bypassing the git-aware transport on clone.",22,{"inputs":[{"name":"self"},{"name":"clonelocal"}],"output":{"name":"repobuilder"}}],[11,"with_checkout","","Configure the checkout which will be performed by consuming a checkout builder.",22,{"inputs":[{"name":"self"},{"name":"checkoutbuilder"}],"output":{"name":"repobuilder"}}],[11,"fetch_options","","Options which control the fetch, including callbacks.",22,{"inputs":[{"name":"self"},{"name":"fetchoptions"}],"output":{"name":"repobuilder"}}],[11,"remote_create","","Configures a callback used to create the git remote, prior to its being used to perform the clone operation.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"repobuilder"}}],[11,"clone","","Clone a remote repository.",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"path"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new builder for checkouts with all of its default configuration.",23,{"inputs":[],"output":{"name":"checkoutbuilder"}}],[11,"dry_run","","Indicate that this checkout should perform a dry run by checking for conflicts but not make any actual changes.",23,{"inputs":[{"name":"self"}],"output":{"name":"checkoutbuilder"}}],[11,"force","","Take any action necessary to get the working directory to match the target including potentially discarding modified files.",23,{"inputs":[{"name":"self"}],"output":{"name":"checkoutbuilder"}}],[11,"safe","","Indicate that the checkout should be performed safely, allowing new files to be created but not overwriting extisting files or changes.",23,{"inputs":[{"name":"self"}],"output":{"name":"checkoutbuilder"}}],[11,"recreate_missing","","In safe mode, create files that don't exist.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"allow_conflicts","","In safe mode, apply safe file updates even when there are conflicts instead of canceling the checkout.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"remove_untracked","","Remove untracked files from the working dir.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"remove_ignored","","Remove ignored files from the working dir.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"update_only","","Only update the contents of files that already exist.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"update_index","","Prevents checkout from writing the updated files' information to the index.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"refresh","","Indicate whether the index and git attributes should be refreshed from disk before any operations.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"skip_unmerged","","Skip files with unmerged index entries.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"use_ours","","Indicate whether the checkout should proceed on conflicts by using the stage 2 version of the file (\"ours\").",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"use_theirs","","Indicate whether the checkout should proceed on conflicts by using the stage 3 version of the file (\"theirs\").",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"overwrite_ignored","","Indicate whether ignored files should be overwritten during the checkout.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"conflict_style_merge","","Indicate whether a normal merge file should be written for conflicts.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"notify_on","","Specify for which notification types to invoke the notification callback.",23,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"checkoutbuilder"}}],[11,"conflict_style_diff3","","Indicates whether to include common ancestor data in diff3 format files for conflicts.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"disable_filters","","Indicate whether to apply filters like CRLF conversion.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"checkoutbuilder"}}],[11,"dir_perm","","Set the mode with which new directories are created.",23,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"checkoutbuilder"}}],[11,"file_perm","","Set the mode with which new files are created.",23,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"checkoutbuilder"}}],[11,"path","","Add a path to be checked out.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"checkoutbuilder"}}],[11,"target_dir","","Set the directory to check out to",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"checkoutbuilder"}}],[11,"ancestor_label","","The name of the common ancestor side of conflicts",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"checkoutbuilder"}}],[11,"our_label","","The name of the common our side of conflicts",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"checkoutbuilder"}}],[11,"their_label","","The name of the common their side of conflicts",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"checkoutbuilder"}}],[11,"progress","","Set a callback to receive notifications of checkout progress.",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"checkoutbuilder"}}],[11,"notify","","Set a callback to receive checkout notifications.",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"checkoutbuilder"}}],[11,"configure","","Configure a raw checkout options based on this configuration.",23,{"inputs":[{"name":"self"},{"name":"git_checkout_options"}],"output":null}],[0,"cert","git2","Certificate types which are passed to `CertificateCheck` in `RemoteCallbacks`.",null,null],[3,"Cert","git2::cert","A certificate for a remote connection, viewable as one of `CertHostkey` or `CertX509` currently.",null,null],[3,"CertHostkey","","Hostkey information taken from libssh2",null,null],[3,"CertX509","","X.509 certificate information",null,null],[11,"as_hostkey","","Attempt to view this certificate as an SSH hostkey.",24,{"inputs":[{"name":"self"}],"output":{"generics":["certhostkey"],"name":"option"}}],[11,"as_x509","","Attempt to view this certificate as an X.509 certificate.",24,{"inputs":[{"name":"self"}],"output":{"generics":["certx509"],"name":"option"}}],[11,"hash_md5","","Returns the md5 hash of the hostkey, if available.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"hash_sha1","","Returns the SHA-1 hash of the hostkey, if available.",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"data","","Return the X.509 certificate data as a byte slice",26,null],[0,"string_array","git2","Bindings to libgit2's raw `git_strarray` type",null,null],[3,"StringArray","git2::string_array","A string array structure used by libgit2",null,null],[3,"Iter","","A forward iterator over the strings of an array, casted to `&str`.",null,null],[3,"IterBytes","","A forward iterator over the strings of an array, casted to `&[u8]`.",null,null],[11,"get","","Returns None if the i'th string is not utf8 or if i is out of bounds.",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["str"],"name":"option"}}],[11,"get_bytes","","Returns None if `i` is out of bounds.",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the strings contained within this array.",27,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_bytes","","Returns an iterator over the strings contained within this array, yielding byte slices.",27,{"inputs":[{"name":"self"}],"output":{"name":"iterbytes"}}],[11,"len","","Returns the number of strings in this array.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return `true` if this array is empty.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",27,{"inputs":[{"name":"self"}],"output":null}],[0,"oid_array","git2","Bindings to libgit2's raw `git_oidarray` type",null,null],[3,"OidArray","git2::oid_array","An oid array structure used by libgit2",null,null],[11,"deref","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",30,{"inputs":[{"name":"self"}],"output":null}],[0,"transport","git2","Interfaces for adding custom transports to libgit2",null,null],[3,"Transport","git2::transport","A transport is a structure which knows how to transfer data to and from a remote.",null,null],[4,"Service","","Actions that a smart transport can ask a subtransport to perform",null,null],[13,"UploadPackLs","","",31,null],[13,"UploadPack","","",31,null],[13,"ReceivePackLs","","",31,null],[13,"ReceivePack","","",31,null],[5,"register","","Add a custom transport definition, to be used in addition to the built-in set of transports that come with libgit2.",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[8,"SmartSubtransport","","Interface used by smart transports.",null,null],[10,"action","","Indicates that this subtransport will be performing the specified action on the specified URL.",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"service"}],"output":{"generics":["box","error"],"name":"result"}}],[10,"close","","Terminates a connection with the remote.",32,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[8,"SmartSubtransportStream","","An instance of a stream over which a smart transport will communicate with a remote.",null,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"service"}}],[11,"smart","","Creates a new transport which will use the \"smart\" transport protocol for transferring data.",33,{"inputs":[{"name":"remote"},{"name":"bool"},{"name":"s"}],"output":{"generics":["transport","error"],"name":"result"}}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"len","git2","Gets the number of hunks that exist in the blame structure.",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return `true` is there is no hunk in the blame structure.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_index","","Gets the blame hunk at the given index.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["blamehunk"],"name":"option"}}],[11,"get_line","","Gets the hunk that relates to the given line number in the newest commit.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["blamehunk"],"name":"option"}}],[11,"iter","","Returns an iterator over the hunks in this blame.",34,{"inputs":[{"name":"self"}],"output":{"name":"blameiter"}}],[11,"final_commit_id","","Returns OID of the commit where this line was last changed",35,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"final_signature","","Returns signature of the commit.",35,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"final_start_line","","Returns line number where this hunk begins.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"orig_commit_id","","Returns the OID of the commit where this hunk was found.",35,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"orig_signature","","Returns signature of the commit.",35,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"orig_start_line","","Returns line number where this hunk begins.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"path","","Returns path to the file where this hunk originated.",35,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"is_boundary","","Tests whether this hunk has been tracked to a boundary commit (the root, or the commit specified in git_blame_options.oldest_commit).",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lines_in_hunk","","Returns number of lines in this hunk.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Initialize options",36,{"inputs":[],"output":{"name":"blameoptions"}}],[11,"track_copies_same_file","","Track lines that have moved within a file.",36,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"track_copies_same_commit_moves","","Track lines that have moved across files in the same commit.",36,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"track_copies_same_commit_copies","","Track lines that have been copied from another file that exists in the same commit.",36,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"track_copies_any_commit_copies","","Track lines that have been copied from another file that exists in any commit.",36,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"first_parent","","Restrict the search of commits to those reachable following only the first parents.",36,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"blameoptions"}}],[11,"newest_commit","","Setter for the id of the newest commit to consider.",36,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"name":"blameoptions"}}],[11,"oldest_commit","","Setter for the id of the oldest commit to consider.",36,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"name":"blameoptions"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["blamehunk"],"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["blamehunk"],"name":"option"}}],[11,"id","","Get the id (SHA1) of a repository blob",38,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"is_binary","","Determine if the blob content is most certainly binary or not.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"content","","Get the content of this blob.",38,null],[11,"as_object","","Casts this Blob to be usable as an `Object`",38,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"into_object","","Consumes Blob to be returned as an `Object`",38,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"commit","","Finalize blob writing stream and write the blob to the object db",39,{"inputs":[{"name":"self"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"drop","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",39,null],[11,"flush","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wrap","","Creates Branch type from a Reference",40,{"inputs":[{"name":"reference"}],"output":{"name":"branch"}}],[11,"get","","Gain access to the reference that is this branch",40,{"inputs":[{"name":"self"}],"output":{"name":"reference"}}],[11,"into_reference","","Take ownership of the underlying reference.",40,{"inputs":[{"name":"self"}],"output":{"name":"reference"}}],[11,"delete","","Delete an existing branch reference.",40,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_head","","Determine if the current local branch is pointed at by HEAD.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rename","","Move/rename an existing local branch reference.",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"generics":["branch","error"],"name":"result"}}],[11,"name","","Return the name of the given local or remote branch.",40,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"name_bytes","","Return the name of the given local or remote branch.",40,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"upstream","","Return the reference supporting the remote tracking branch, given a local branch reference.",40,{"inputs":[{"name":"self"}],"output":{"generics":["branch","error"],"name":"result"}}],[11,"set_upstream","","Set the upstream configuration for a given local branch.",40,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_raw","","Creates a new iterator from the raw pointer given.",41,null],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"drop","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new empty buffer.",42,{"inputs":[],"output":{"name":"buf"}}],[11,"as_str","","Attempt to view this buffer as a string slice.",42,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"deref","","",42,null],[11,"deref_mut","","",42,null],[11,"drop","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"id","","Get the id (SHA1) of a repository commit",43,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"tree_id","","Get the id of the tree pointed to by this commit.",43,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"tree","","Get the tree pointed to by a commit.",43,{"inputs":[{"name":"self"}],"output":{"generics":["tree","error"],"name":"result"}}],[11,"raw","","Get access to the underlying raw pointer.",43,null],[11,"message","","Get the full message of a commit.",43,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"message_bytes","","Get the full message of a commit as a byte slice.",43,null],[11,"message_encoding","","Get the encoding for the message of a commit, as a string representing a standard encoding name.",43,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"message_raw","","Get the full raw message of a commit.",43,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"message_raw_bytes","","Get the full raw message of a commit.",43,null],[11,"raw_header","","Get the full raw text of the commit header.",43,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"raw_header_bytes","","Get the full raw text of the commit header.",43,null],[11,"summary","","Get the short \"summary\" of the git commit message.",43,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"summary_bytes","","Get the short \"summary\" of the git commit message.",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"time","","Get the commit time (i.e. committer time) of a commit.",43,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"parents","","Creates a new iterator over the parents of this commit.",43,{"inputs":[{"name":"self"}],"output":{"name":"parents"}}],[11,"parent_ids","","Creates a new iterator over the parents of this commit.",43,{"inputs":[{"name":"self"}],"output":{"name":"parentids"}}],[11,"author","","Get the author of this commit.",43,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"committer","","Get the committer of this commit.",43,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"amend","","Amend this existing commit with all non-`None` values",43,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"generics":["signature"],"name":"option"},{"generics":["signature"],"name":"option"},{"generics":["str"],"name":"option"},{"generics":["str"],"name":"option"},{"generics":["tree"],"name":"option"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"parent","","Get the specified parent of the commit.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["commit","error"],"name":"result"}}],[11,"parent_id","","Get the specified parent id of the commit.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"as_object","","Casts this Commit to be usable as an `Object`",43,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"into_object","","Consumes Commit to be returned as an `Object`",43,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["commit"],"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["commit"],"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Allocate a new configuration object",45,{"inputs":[],"output":{"generics":["config","error"],"name":"result"}}],[11,"open","","Create a new config instance containing a single on-disk file",45,{"inputs":[{"name":"path"}],"output":{"generics":["config","error"],"name":"result"}}],[11,"open_default","","Open the global, XDG and system configuration files",45,{"inputs":[],"output":{"generics":["config","error"],"name":"result"}}],[11,"find_global","","Locate the path to the global configuration file",45,{"inputs":[],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"find_system","","Locate the path to the system configuration file",45,{"inputs":[],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"find_xdg","","Locate the path to the global xdg compatible configuration file",45,{"inputs":[],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"add_file","","Add an on-disk config file instance to an existing config",45,{"inputs":[{"name":"self"},{"name":"path"},{"name":"configlevel"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove","","Delete a config variable from the config file with the highest level (usually the local one).",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_bool","","Get the value of a boolean config variable.",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"get_i32","","Get the value of an integer config variable.",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["i32","error"],"name":"result"}}],[11,"get_i64","","Get the value of an integer config variable.",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["i64","error"],"name":"result"}}],[11,"get_str","","Get the value of a string config variable.",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str","error"],"name":"result"}}],[11,"get_bytes","","Get the value of a string config variable as a byte slice.",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_string","","Get the value of a string config variable as an owned string.",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"get_path","","Get the value of a path config variable as an owned .",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[11,"get_entry","","Get the ConfigEntry for a config variable.",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["configentry","error"],"name":"result"}}],[11,"entries","","Iterate over all the config variables",45,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"generics":["configentries","error"],"name":"result"}}],[11,"open_global","","Open the global/XDG configuration file according to git's rules",45,{"inputs":[{"name":"self"}],"output":{"generics":["config","error"],"name":"result"}}],[11,"open_level","","Build a single-level focused config object from a multi-level one.",45,{"inputs":[{"name":"self"},{"name":"configlevel"}],"output":{"generics":["config","error"],"name":"result"}}],[11,"set_bool","","Set the value of a boolean config variable in the config file with the highest level (usually the local one).",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_i32","","Set the value of an integer config variable in the config file with the highest level (usually the local one).",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_i64","","Set the value of an integer config variable in the config file with the highest level (usually the local one).",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_multivar","","Set the value of an multivar config variable in the config file with the highest level (usually the local one).",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_str","","Set the value of a string config variable in the config file with the highest level (usually the local one).",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"snapshot","","Create a snapshot of the configuration",45,{"inputs":[{"name":"self"}],"output":{"generics":["config","error"],"name":"result"}}],[11,"parse_bool","","Parse a string as a bool. Interprets \"true\", \"yes\", \"on\", 1, or any non-zero number as true. Interprets \"false\", \"no\", \"off\", 0, or an empty string as false.",45,{"inputs":[{"name":"s"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"parse_i32","","Parse a string as an i32; handles suffixes like k, M, or G, and multiplies by the appropriate power of 1024.",45,{"inputs":[{"name":"s"}],"output":{"generics":["i32","error"],"name":"result"}}],[11,"parse_i64","","Parse a string as an i64; handles suffixes like k, M, or G, and multiplies by the appropriate power of 1024.",45,{"inputs":[{"name":"s"}],"output":{"generics":["i64","error"],"name":"result"}}],[11,"drop","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"name","","Gets the name of this entry.",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"name_bytes","","Gets the name of this entry as a byte slice.",46,null],[11,"value","","Gets the value of this entry.",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"value_bytes","","Gets the value of this entry as a byte slice.",46,null],[11,"level","","Gets the configuration level of this entry.",46,{"inputs":[{"name":"self"}],"output":{"name":"configlevel"}}],[11,"drop","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Create a \"default\" credential usable for Negotiate mechanisms like NTLM or Kerberos authentication.",48,{"inputs":[],"output":{"generics":["cred","error"],"name":"result"}}],[11,"ssh_key_from_agent","","Create a new ssh key credential object used for querying an ssh-agent.",48,{"inputs":[{"name":"str"}],"output":{"generics":["cred","error"],"name":"result"}}],[11,"ssh_key","","Create a new passphrase-protected ssh key credential object.",48,{"inputs":[{"name":"str"},{"generics":["path"],"name":"option"},{"name":"path"},{"generics":["str"],"name":"option"}],"output":{"generics":["cred","error"],"name":"result"}}],[11,"userpass_plaintext","","Create a new plain-text username and password credential object.",48,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["cred","error"],"name":"result"}}],[11,"credential_helper","","Attempt to read `credential.helper` according to gitcredentials(7) [1]",48,{"inputs":[{"name":"config"},{"name":"str"},{"generics":["str"],"name":"option"}],"output":{"generics":["cred","error"],"name":"result"}}],[11,"username","","Create a credential to specify a username.",48,{"inputs":[{"name":"str"}],"output":{"generics":["cred","error"],"name":"result"}}],[11,"has_username","","Check whether a credential object contains username information.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"credtype","","Return the type of credentials that this object represents.",48,{"inputs":[{"name":"self"}],"output":{"name":"git_credtype_t"}}],[11,"unwrap","","Unwrap access to the underlying raw pointer, canceling the destructor",48,null],[11,"drop","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new credential helper object which will be used to probe git's local credential configuration.",0,{"inputs":[{"name":"str"}],"output":{"name":"credentialhelper"}}],[11,"username","","Set the username that this credential helper will query with.",0,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"credentialhelper"}}],[11,"config","","Query the specified configuration object to discover commands to execute, usernames to query, etc.",0,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"credentialhelper"}}],[11,"execute","","Execute this helper, attempting to discover a username/password pair.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"format","","Prints this describe result, returning the result as a string.",49,{"inputs":[{"name":"self"},{"generics":["describeformatoptions"],"name":"option"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"drop","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new blank set of formatting options for a description.",50,{"inputs":[],"output":{"name":"describeformatoptions"}}],[11,"abbreviated_size","","Sets the size of the abbreviated commit id to use.",50,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"always_use_long_format","","Sets whether or not the long format is used even when a shorter name could be used.",50,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"dirty_suffix","","If the workdir is dirty and this is set, this string will be appended to the description string.",50,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new blank set of formatting options for a description.",51,{"inputs":[],"output":{"name":"describeoptions"}}],[11,"max_candidates_tags","","",51,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"describe_tags","","Sets the reference lookup strategy",51,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"describe_all","","Sets the reference lookup strategy",51,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"only_follow_first_parent","","Indicates when calculating the distance from the matching tag or reference whether to only walk down the first-parent ancestry.",51,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"show_commit_oid_as_fallback","","If no matching tag or reference is found whether a describe option would normally fail. This option indicates, however, that it will instead fall back to showing the full id of the commit.",51,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"pattern","","",51,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"diffbinarykind"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"merge","","Merge one diff into another.",52,{"inputs":[{"name":"self"},{"name":"diff"}],"output":{"generics":["error"],"name":"result"}}],[11,"deltas","","Returns an iterator over the deltas in this diff.",52,{"inputs":[{"name":"self"}],"output":{"name":"deltas"}}],[11,"get_delta","","Return the diff delta for an entry in the diff list.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["diffdelta"],"name":"option"}}],[11,"is_sorted_icase","","Check if deltas are sorted case sensitively or insensitively.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"print","","Iterate over a diff generating formatted text output.",52,{"inputs":[{"name":"self"},{"name":"diffformat"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"foreach","","Loop over all deltas in a diff issuing callbacks.",52,{"inputs":[{"name":"self"},{"name":"fnmut"},{"generics":["fnmut"],"name":"option"},{"generics":["fnmut"],"name":"option"},{"generics":["fnmut"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"stats","","Accumulate diff statistics for all patches.",52,{"inputs":[{"name":"self"}],"output":{"generics":["diffstats","error"],"name":"result"}}],[11,"find_similar","","Transform a diff marking file renames, copies, etc.",52,{"inputs":[{"name":"self"},{"generics":["difffindoptions"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"nfiles","","Returns the number of files in this delta.",53,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"status","","Returns the status of this entry",53,{"inputs":[{"name":"self"}],"output":{"name":"delta"}}],[11,"old_file","","Return the file which represents the \"from\" side of the diff.",53,{"inputs":[{"name":"self"}],"output":{"name":"difffile"}}],[11,"new_file","","Return the file which represents the \"to\" side of the diff.",53,{"inputs":[{"name":"self"}],"output":{"name":"difffile"}}],[11,"id","","Returns the Oid of this item.",54,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"path_bytes","","Returns the path, in bytes, of the entry relative to the working directory of the repository.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"path","","Returns the path of the entry relative to the working directory of the repository.",54,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"size","","Returns the size of this entry, in bytes",54,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new set of empty diff options.",55,{"inputs":[],"output":{"name":"diffoptions"}}],[11,"reverse","","Flag indicating whether the sides of the diff will be reversed.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_ignored","","Flag indicating whether ignored files are included.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"recurse_ignored_dirs","","Flag indicating whether ignored directories are traversed deeply or not.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_untracked","","Flag indicating whether untracked files are in the diff",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"recurse_untracked_dirs","","Flag indicating whether untracked directories are deeply traversed or not.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_unmodified","","Flag indicating whether unmodified files are in the diff.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_typechange","","If entrabled, then Typechange delta records are generated.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_typechange_trees","","Event with `include_typechange`, the tree treturned generally shows a deleted blow. This flag correctly labels the tree transitions as a typechange record with the `new_file`'s mode set to tree.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_filemode","","Flag indicating whether file mode changes are ignored.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_submodules","","Flag indicating whether all submodules should be treated as unmodified.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_case","","Flag indicating whether case insensitive filenames should be used.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"disable_pathspec_match","","If pathspecs are specified, this flag means that they should be applied as an exact match instead of a fnmatch pattern.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"skip_binary_check","","Disable updating the `binary` flag in delta records. This is useful when iterating over a diff if you don't need hunk and data callbacks and want to avoid having to load a file completely.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"enable_fast_untracked_dirs","","When diff finds an untracked directory, to match the behavior of core Git, it scans the contents for ignored and untracked files. If all contents are ignored, then the directory is ignored; if any contents are not ignored, then the directory is untracked. This is extra work that may not matter in many cases.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"update_index","","When diff finds a file in the working directory with stat information different from the index, but the OID ends up being the same, write the correct stat information into the index. Note: without this flag, diff will always leave the index untouched.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_unreadable","","Include unreadable files in the diff",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"include_unreadable_as_untracked","","Include unreadable files in the diff",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"force_text","","Treat all files as text, disabling binary attributes and detection.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"force_binary","","Treat all files as binary, disabling text diffs",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_whitespace","","Ignore all whitespace",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_whitespace_change","","Ignore changes in the amount of whitespace",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"ignore_whitespace_eol","","Ignore whitespace at tend of line",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"show_untracked_content","","When generating patch text, include the content of untracked files.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"show_unmodified","","When generating output, include the names of unmodified files if they are included in the `Diff`. Normally these are skipped in the formats that list files (e.g. name-only, name-status, raw). Even with this these will not be included in the patch format.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"patience","","Use the \"patience diff\" algorithm",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"minimal","","Take extra time to find the minimal diff",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"show_binary","","Include the necessary deflate/delta information so that `git-apply` can apply given diff information to binary files.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"indent_heuristic","","Use a heuristic that takes indentation and whitespace into account which generally can produce better diffs when dealing with ambiguous diff hunks.",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"diffoptions"}}],[11,"context_lines","","Set the number of unchanged lines that define the boundary of a hunk (and to display before and after).",55,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"diffoptions"}}],[11,"interhunk_lines","","Set the maximum number of unchanged lines between hunk boundaries before the hunks will be merged into one.",55,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"diffoptions"}}],[11,"id_abbrev","","The default value for this is `core.abbrev` or 7 if unset.",55,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"diffoptions"}}],[11,"max_size","","Maximum size (in bytes) above which a blob will be marked as binary automatically.",55,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"diffoptions"}}],[11,"old_prefix","","The virtual \"directory\" to prefix old file names with in hunk headers.",55,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diffoptions"}}],[11,"new_prefix","","The virtual \"directory\" to prefix new file names with in hunk headers.",55,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diffoptions"}}],[11,"pathspec","","Add to the array of paths/fnmatch patterns to constrain the diff.",55,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"diffoptions"}}],[11,"raw","","Acquire a pointer to the underlying raw options.",55,null],[11,"next","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["diffdelta"],"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["diffdelta"],"name":"option"}}],[11,"old_lineno","","Line number in old file or `None` for added line",57,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"new_lineno","","Line number in new file or `None` for deleted line",57,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"num_lines","","Number of newline characters in content",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"content_offset","","Offset in the original file to the content",57,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"content","","Content of this line as bytes.",57,null],[11,"origin","","Sigil showing the origin of this `DiffLine`.",57,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"old_start","","Starting line number in old_file",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"old_lines","","Number of lines in old_file",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new_start","","Starting line number in new_file",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new_lines","","Number of lines in new_file",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"header","","Header text",58,null],[11,"files_changed","","Get the total number of files chaned in a diff.",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"insertions","","Get the total number of insertions in a diff",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deletions","","Get the total number of deletions in a diff",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_buf","","Print diff statistics to a Buf",59,{"inputs":[{"name":"self"},{"name":"diffstatsformat"},{"name":"usize"}],"output":{"generics":["buf","error"],"name":"result"}}],[11,"drop","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"contains_data","","Returns whether there is data in this binary structure or not.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"old_file","","The contents of the old file.",60,{"inputs":[{"name":"self"}],"output":{"name":"diffbinaryfile"}}],[11,"new_file","","The contents of the new file.",60,{"inputs":[{"name":"self"}],"output":{"name":"diffbinaryfile"}}],[11,"kind","","The type of binary data for this file",61,{"inputs":[{"name":"self"}],"output":{"name":"diffbinarykind"}}],[11,"data","","The binary data, deflated",61,null],[11,"inflated_len","","The length of the binary data after inflation",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new set of empty diff find options.",62,{"inputs":[],"output":{"name":"difffindoptions"}}],[11,"by_config","","Reset all flags back to their unset state, indicating that `diff.renames` should be used instead. This is overridden once any flag is set.",62,{"inputs":[{"name":"self"}],"output":{"name":"difffindoptions"}}],[11,"renames","","Look for renames?",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"renames_from_rewrites","","Consider old side of modified for renames?",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"copies","","Look for copies?",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"copies_from_unmodified","","Consider unmodified as copy sources?",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"rewrites","","Mark significant rewrites for split.",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"break_rewrites","","Actually split large rewrites into delete/add pairs",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"for_untracked","","Find renames/copies for untracked items in working directory.",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"all","","Turn on all finding features.",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"ignore_leading_whitespace","","Measure similarity ignoring leading whitespace (default)",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"ignore_whitespace","","Measure similarity ignoring all whitespace",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"dont_ignore_whitespace","","Measure similarity including all data",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"exact_match_only","","Measure similarity only by comparing SHAs (fast and cheap)",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"break_rewrites_for_renames_only","","Do not break rewrites unless they contribute to a rename.",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"remove_unmodified","","Remove any unmodified deltas after find_similar is done.",62,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"difffindoptions"}}],[11,"rename_threshold","","Similarity to consider a file renamed (default 50)",62,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"rename_from_rewrite_threshold","","Similarity of modified to be glegible rename source (default 50)",62,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"copy_threshold","","Similarity to consider a file copy (default 50)",62,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"break_rewrite_threshold","","Similarity to split modify into delete/add pair (default 60)",62,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"difffindoptions"}}],[11,"rename_limit","","Maximum similarity sources to examine for a file (somewhat like git-diff's `-l` option or `diff.renameLimit` config)",62,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"difffindoptions"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"last_error","","Returns the last error that happened with the code specified by `code`.",63,{"inputs":[{"name":"c_int"}],"output":{"generics":["error"],"name":"option"}}],[11,"from_str","","Creates a new error from the given string as the error.",63,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"code","","Return the error code associated with this error.",63,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"class","","Return the error class associated with this error.",63,{"inputs":[{"name":"self"}],"output":{"name":"errorclass"}}],[11,"raw_code","","Return the raw error code associated with this error.",63,{"inputs":[{"name":"self"}],"output":{"name":"git_error_code"}}],[11,"raw_class","","Return the raw error class associated with this error.",63,{"inputs":[{"name":"self"}],"output":{"name":"git_error_t"}}],[11,"message","","Return the message associated with this error",63,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",63,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",63,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",63,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"error"}}],[11,"new","","Creates a new in-memory index.",64,{"inputs":[],"output":{"generics":["index","error"],"name":"result"}}],[11,"open","","Create a new bare Git index object as a memory representation of the Git index file in 'index_path', without a repository to back it.",64,{"inputs":[{"name":"path"}],"output":{"generics":["index","error"],"name":"result"}}],[11,"add","","Add or update an index entry from an in-memory struct",64,{"inputs":[{"name":"self"},{"name":"indexentry"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_path","","Add or update an index entry from a file on disk",64,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_all","","Add or update index entries matching files in the working directory.",64,{"inputs":[{"name":"self"},{"name":"i"},{"name":"indexaddoption"},{"generics":["indexmatchedpath"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"clear","","Clear the contents (all the entries) of an index object.",64,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"len","","Get the count of entries currently in the index",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return `true` is there is no entry in the index",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Get one of the entries in the index by its position.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["indexentry"],"name":"option"}}],[11,"iter","","Get an iterator over the entries in this index.",64,{"inputs":[{"name":"self"}],"output":{"name":"indexentries"}}],[11,"get_path","","Get one of the entries in the index by its path.",64,{"inputs":[{"name":"self"},{"name":"path"},{"name":"i32"}],"output":{"generics":["indexentry"],"name":"option"}}],[11,"has_conflicts","","Does this index have conflicts?",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"path","","Get the full path to the index file on disk.",64,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"read","","Update the contents of an existing index object in memory by reading from the hard disk.",64,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"read_tree","","Read a tree into the index file with stats",64,{"inputs":[{"name":"self"},{"name":"tree"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove","","Remove an entry from the index",64,{"inputs":[{"name":"self"},{"name":"path"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove_path","","Remove an index entry corresponding to a file on disk.",64,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove_dir","","Remove all entries from the index under a given directory.",64,{"inputs":[{"name":"self"},{"name":"path"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove_all","","Remove all matching index entries.",64,{"inputs":[{"name":"self"},{"name":"i"},{"generics":["indexmatchedpath"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"update_all","","Update all index entries to match the working directory",64,{"inputs":[{"name":"self"},{"name":"i"},{"generics":["indexmatchedpath"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","Write an existing index object from memory back to disk using an atomic file lock.",64,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_tree","","Write the index as a tree.",64,{"inputs":[{"name":"self"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"write_tree_to","","Write the index as a tree to the given repository",64,{"inputs":[{"name":"self"},{"name":"repository"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"drop","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["indexentry"],"name":"option"}}],[11,"id","","Gets the commit ID that the given git_annotated_commit refers to",66,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a default set of merge options.",67,{"inputs":[],"output":{"name":"mergeoptions"}}],[11,"find_renames","","Detect file renames",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"rename_threshold","","Similarity to consider a file renamed (default 50)",67,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"mergeoptions"}}],[11,"target_limit","","Maximum similarity sources to examine for renames (default 200). If the number of rename candidates (add / delete pairs) is greater than this value, inexact rename detection is aborted. This setting overrides the `merge.renameLimit` configuration value.",67,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"mergeoptions"}}],[11,"recursion_limit","","Maximum number of times to merge common ancestors to build a virtual merge base when faced with criss-cross merges.  When this limit is reached, the next ancestor will simply be used instead of attempting to merge it.  The default is unlimited.",67,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"mergeoptions"}}],[11,"file_favor","","Specify a side to favor for resolving conflicts",67,{"inputs":[{"name":"self"},{"name":"filefavor"}],"output":{"name":"mergeoptions"}}],[11,"standard_style","","Create standard conflicted merge files",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"diff3_style","","Create diff3-style file",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"simplify_alnum","","Condense non-alphanumeric regions for simplified diff file",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"ignore_whitespace","","Ignore all whitespace",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"ignore_whitespace_change","","Ignore changes in amount of whitespace",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"ignore_whitespace_eol","","Ignore whitespace at end of line",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"patience","","Use the \"patience diff\" algorithm",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"minimal","","Take extra time to find minimal diff",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"mergeoptions"}}],[11,"raw","","Acquire a pointer to the underlying raw options.",67,null],[11,"drop","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"author","","Get the note author",68,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"committer","","Get the note committer",68,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"message_bytes","","Get the note message, in bytes.",68,null],[11,"message","","Get the note message as a string, returning `None` if it is not UTF-8.",68,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"id","","Get the note object's id",68,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"drop","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"id","","Get the id (SHA1) of a repository object",70,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"kind","","Get the object type of an object.",70,{"inputs":[{"name":"self"}],"output":{"generics":["objecttype"],"name":"option"}}],[11,"peel","","Recursively peel an object until an object of the specified type is met.",70,{"inputs":[{"name":"self"},{"name":"objecttype"}],"output":{"generics":["object","error"],"name":"result"}}],[11,"peel_to_blob","","Recursively peel an object until a blob is found",70,{"inputs":[{"name":"self"}],"output":{"generics":["blob","error"],"name":"result"}}],[11,"peel_to_commit","","Recursively peel an object until a commit is found",70,{"inputs":[{"name":"self"}],"output":{"generics":["commit","error"],"name":"result"}}],[11,"peel_to_tag","","Recursively peel an object until a tag is found",70,{"inputs":[{"name":"self"}],"output":{"generics":["tag","error"],"name":"result"}}],[11,"peel_to_tree","","Recursively peel an object until a tree is found",70,{"inputs":[{"name":"self"}],"output":{"generics":["tree","error"],"name":"result"}}],[11,"short_id","","Get a short abbreviated OID string for the object",70,{"inputs":[{"name":"self"}],"output":{"generics":["buf","error"],"name":"result"}}],[11,"as_commit","","Attempt to view this object as a commit.",70,{"inputs":[{"name":"self"}],"output":{"generics":["commit"],"name":"option"}}],[11,"into_commit","","Attempt to consume this object and return a commit.",70,{"inputs":[{"name":"self"}],"output":{"generics":["commit","object"],"name":"result"}}],[11,"as_tag","","Attempt to view this object as a tag.",70,{"inputs":[{"name":"self"}],"output":{"generics":["tag"],"name":"option"}}],[11,"into_tag","","Attempt to consume this object and return a tag.",70,{"inputs":[{"name":"self"}],"output":{"generics":["tag","object"],"name":"result"}}],[11,"as_tree","","Attempt to view this object as a tree.",70,{"inputs":[{"name":"self"}],"output":{"generics":["tree"],"name":"option"}}],[11,"into_tree","","Attempt to consume this object and return a tree.",70,{"inputs":[{"name":"self"}],"output":{"generics":["tree","object"],"name":"result"}}],[11,"as_blob","","Attempt to view this object as a blob.",70,{"inputs":[{"name":"self"}],"output":{"generics":["blob"],"name":"option"}}],[11,"into_blob","","Attempt to consume this object and return a blob.",70,{"inputs":[{"name":"self"}],"output":{"generics":["blob","object"],"name":"result"}}],[11,"describe","","Describes a commit",70,{"inputs":[{"name":"self"},{"name":"describeoptions"}],"output":{"generics":["describe","error"],"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates an object database without any backends.",71,{"inputs":[],"output":{"generics":["odb","error"],"name":"result"}}],[11,"reader","","Create object database reading stream.",71,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["error"],"name":"result"}}],[11,"writer","","Create object database writing stream.",71,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"objecttype"}],"output":{"generics":["odbwriter","error"],"name":"result"}}],[11,"foreach","","Iterate over all objects in the object database.s",71,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","Read an object from the database.",71,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["odbobject","error"],"name":"result"}}],[11,"read_header","","Reads the header of an object from the database without reading the full content.",71,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","Write an object to the database.",71,null],[11,"exists","","Checks if the object database has an object.",71,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"name":"bool"}}],[11,"exists_prefix","","Potentially finds an object that starts with the given prefix.",71,{"inputs":[{"name":"self"},{"name":"oid"},{"name":"usize"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"refresh","","Refresh the object database. This should never be needed, and is provided purely for convenience. The object database will automatically refresh when an object is not found when requested.",71,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_disk_alternate","","Adds an alternate disk backend to the object database.",71,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"kind","","Get the object type.",72,{"inputs":[{"name":"self"}],"output":{"name":"objecttype"}}],[11,"len","","Get the object size.",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"data","","Get the object data.",72,null],[11,"id","","Get the object id.",72,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"drop","","",73,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",73,null],[11,"finalize","","Finish writing to an ODB stream",74,{"inputs":[{"name":"self"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"drop","","",74,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",74,null],[11,"flush","","",74,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"from_str","","Parse a hex-formatted object id into an Oid structure.",75,{"inputs":[{"name":"str"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"from_bytes","","Parse a raw object id into an Oid structure.",75,null],[11,"zero","","Creates an all zero Oid structure.",75,{"inputs":[],"output":{"name":"oid"}}],[11,"hash_object","","Hashes the provided data as an object of the provided type, and returns an Oid corresponding to the result. This does not store the object inside any object database or repository.",75,null],[11,"hash_file","","Hashes the content of the provided file as an object of the provided type, and returns an Oid corresponding to the result. This does not store the object inside any object database or repository.",75,{"inputs":[{"name":"objecttype"},{"name":"p"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"as_bytes","","View this OID as a byte-slice 20 bytes in length.",75,null],[11,"is_zero","","Test if this OID is all zeros.",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Hex-encode this Oid into a formatter.",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parse a hex-formatted object id into an Oid structure.",75,{"inputs":[{"name":"str"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",75,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"name":"ordering"}}],[11,"hash","","",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",75,null],[11,"insert_object","","Insert a single object. For an optimal pack it's mandatory to insert objects in recency order, commits followed by trees and blobs.",76,{"inputs":[{"name":"self"},{"name":"oid"},{"generics":["str"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"insert_tree","","Insert a root tree object. This will add the tree as well as all referenced trees and blobs.",76,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["error"],"name":"result"}}],[11,"insert_commit","","Insert a commit object. This will add a commit as well as the completed referenced tree.",76,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["error"],"name":"result"}}],[11,"insert_walk","","Insert objects as given by the walk. Those commits and all objects they reference will be inserted into the packbuilder.",76,{"inputs":[{"name":"self"},{"name":"revwalk"}],"output":{"generics":["error"],"name":"result"}}],[11,"insert_recursive","","Recursively insert an object and its referenced objects. Insert the object as well as any object it references.",76,{"inputs":[{"name":"self"},{"name":"oid"},{"generics":["str"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_buf","","Write the contents of the packfile to an in-memory buffer. The contents of the buffer will become a valid packfile, even though there will be no attached index.",76,{"inputs":[{"name":"self"},{"name":"buf"}],"output":{"generics":["error"],"name":"result"}}],[11,"foreach","","Create the new pack and pass each object to the callback.",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_progress_callback","","`progress` will be called with progress information during pack building. Be aware that this is called inline with pack building operations, so performance may be affected.",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"unset_progress_callback","","Remove the current progress callback.  See `set_progress_callback` to set the progress callback.",76,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"object_count","","Get the total number of objects the packbuilder will write out.",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"written","","Get the number of objects the packbuilder has already written out.",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"hash","","Get the packfile's hash. A packfile's name is derived from the sorted hashing of all object names. This is only correct after the packfile has been written.",76,{"inputs":[{"name":"self"}],"output":{"generics":["oid"],"name":"option"}}],[11,"drop","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new pathspec from a list of specs to match against.",77,{"inputs":[{"name":"i"}],"output":{"generics":["pathspec","error"],"name":"result"}}],[11,"match_diff","","Match a pathspec against files in a diff.",77,{"inputs":[{"name":"self"},{"name":"diff"},{"name":"pathspecflags"}],"output":{"generics":["pathspecmatchlist","error"],"name":"result"}}],[11,"match_tree","","Match a pathspec against files in a tree.",77,{"inputs":[{"name":"self"},{"name":"tree"},{"name":"pathspecflags"}],"output":{"generics":["pathspecmatchlist","error"],"name":"result"}}],[11,"match_index","","This matches the pathspec against the files in the repository index.",77,{"inputs":[{"name":"self"},{"name":"index"},{"name":"pathspecflags"}],"output":{"generics":["pathspecmatchlist","error"],"name":"result"}}],[11,"match_workdir","","Match a pathspec against the working directory of a repository.",77,{"inputs":[{"name":"self"},{"name":"repository"},{"name":"pathspecflags"}],"output":{"generics":["pathspecmatchlist","error"],"name":"result"}}],[11,"matches_path","","Try to match a path against a pathspec",77,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"drop","","",77,{"inputs":[{"name":"self"}],"output":null}],[11,"entries","","Returns an iterator over the matching filenames in this list.",78,{"inputs":[{"name":"self"}],"output":{"name":"pathspecentries"}}],[11,"entry","","Get a matching filename by position.",78,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"diff_entries","","Returns an iterator over the matching diff entries in this list.",78,{"inputs":[{"name":"self"}],"output":{"name":"pathspecdiffentries"}}],[11,"diff_entry","","Get a matching diff delta by position.",78,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["diffdelta"],"name":"option"}}],[11,"failed_entries","","Returns an iterator over the non-matching entries in this list.",78,{"inputs":[{"name":"self"}],"output":{"name":"pathspecfailedentries"}}],[11,"failed_entry","","Get an original pathspec string that had no matches.",78,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"drop","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["diffdelta"],"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["diffdelta"],"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"from_diff","","Return a Patch for one file in a Diff.",82,{"inputs":[{"name":"diff"},{"name":"usize"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"from_blobs","","Generate a Patch by diffing two blobs.",82,{"inputs":[{"name":"blob"},{"generics":["path"],"name":"option"},{"name":"blob"},{"generics":["path"],"name":"option"},{"generics":["diffoptions"],"name":"option"}],"output":{"generics":["patch","error"],"name":"result"}}],[11,"from_blob_and_buffer","","Generate a Patch by diffing a blob and a buffer.",82,null],[11,"from_buffers","","Generate a Patch by diffing two buffers.",82,null],[11,"delta","","Get the DiffDelta associated with the Patch.",82,{"inputs":[{"name":"self"}],"output":{"name":"diffdelta"}}],[11,"num_hunks","","Get the number of hunks in the Patch.",82,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line_stats","","Get the number of lines of context, additions, and deletions in the Patch.",82,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"hunk","","Get a DiffHunk and its total line count from the Patch.",82,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"num_lines_in_hunk","","Get the number of lines in a hunk.",82,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"line_in_hunk","","Get a DiffLine from a hunk of the Patch.",82,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["diffline","error"],"name":"result"}}],[11,"size","","Get the size of a Patch's diff data in bytes.",82,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"usize"}}],[11,"print","","Print the Patch to text via a callback.",82,{"inputs":[{"name":"self"},{"name":"fnmut"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_buf","","Get the Patch text as a Buf.",82,{"inputs":[{"name":"self"}],"output":{"generics":["buf","error"],"name":"result"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"proxyoptions"}}],[11,"new","","Creates a new set of proxy options ready to be configured.",83,{"inputs":[],"output":{"name":"proxyoptions"}}],[11,"auto","","Try to auto-detect the proxy from the git configuration.",83,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"url","","Specify the exact URL of the proxy to use.",83,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"is_valid_name","","Ensure the reference name is well-formed.",84,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"raw","","Get access to the underlying raw pointer.",84,null],[11,"delete","","Delete an existing reference.",84,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_branch","","Check if a reference is a local branch.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_note","","Check if a reference is a note.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_remote","","Check if a reference is a remote tracking branch",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tag","","Check if a reference is a tag",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"kind","","Get the reference type of a reference.",84,{"inputs":[{"name":"self"}],"output":{"generics":["referencetype"],"name":"option"}}],[11,"name","","Get the full name of a reference.",84,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"name_bytes","","Get the full name of a reference.",84,null],[11,"shorthand","","Get the full shorthand of a reference.",84,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"shorthand_bytes","","Get the full shorthand of a reference.",84,null],[11,"target","","Get the OID pointed to by a direct reference.",84,{"inputs":[{"name":"self"}],"output":{"generics":["oid"],"name":"option"}}],[11,"target_peel","","Return the peeled OID target of this reference.",84,{"inputs":[{"name":"self"}],"output":{"generics":["oid"],"name":"option"}}],[11,"symbolic_target","","Get full name to the reference pointed to by a symbolic reference.",84,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"symbolic_target_bytes","","Get full name to the reference pointed to by a symbolic reference.",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resolve","","Resolve a symbolic reference to a direct reference.",84,{"inputs":[{"name":"self"}],"output":{"generics":["reference","error"],"name":"result"}}],[11,"peel","","Peel a reference to an object",84,{"inputs":[{"name":"self"},{"name":"objecttype"}],"output":{"generics":["object","error"],"name":"result"}}],[11,"peel_to_blob","","Peel a reference to a blob",84,{"inputs":[{"name":"self"}],"output":{"generics":["blob","error"],"name":"result"}}],[11,"peel_to_commit","","Peel a reference to a commit",84,{"inputs":[{"name":"self"}],"output":{"generics":["commit","error"],"name":"result"}}],[11,"peel_to_tree","","Peel a reference to a tree",84,{"inputs":[{"name":"self"}],"output":{"generics":["tree","error"],"name":"result"}}],[11,"peel_to_tag","","Peel a reference to a tag",84,{"inputs":[{"name":"self"}],"output":{"generics":["tag","error"],"name":"result"}}],[11,"rename","","Rename an existing reference.",84,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"},{"name":"str"}],"output":{"generics":["reference","error"],"name":"result"}}],[11,"set_target","","Conditionally create a new reference with the same name as the given reference but a different OID target. The reference must be a direct reference, otherwise this will fail.",84,{"inputs":[{"name":"self"},{"name":"oid"},{"name":"str"}],"output":{"generics":["reference","error"],"name":"result"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"reference"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"reference"}],"output":{"name":"ordering"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"reference"}],"output":{"name":"bool"}}],[11,"drop","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"names","","Consumes a `References` iterator to create an iterator over just the name of some references.",85,{"inputs":[{"name":"self"}],"output":{"name":"referencenames"}}],[11,"next","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"drop","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"append","","Add a new entry to the in-memory reflog.",87,{"inputs":[{"name":"self"},{"name":"oid"},{"name":"signature"},{"generics":["str"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"remove","","Remove an entry from the reflog by its index",87,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"get","","Lookup an entry by its index",87,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["reflogentry"],"name":"option"}}],[11,"len","","Get the number of log entries in a reflog",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return `true` is there is no log entry in a reflog",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Get an iterator to all entries inside of this reflog",87,{"inputs":[{"name":"self"}],"output":{"name":"reflogiter"}}],[11,"write","","Write an existing in-memory reflog object back to disk using an atomic file lock.",87,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"committer","","Get the committer of this entry",88,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"id_new","","Get the new oid",88,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"id_old","","Get the old oid",88,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"message","","Get the log message, returning `None` on invalid UTF-8.",88,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"message_bytes","","Get the log message as a byte array.",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["reflogentry"],"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["reflogentry"],"name":"option"}}],[11,"direction","","Get the refspec's direction.",90,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"dst","","Get the destination specifier.",90,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"dst_bytes","","Get the destination specifier, in bytes.",90,null],[11,"dst_matches","","Check if a refspec's destination descriptor matches a reference",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"src","","Get the source specifier.",90,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"src_bytes","","Get the source specifier, in bytes.",90,null],[11,"src_matches","","Check if a refspec's source descriptor matches a reference",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_force","","Get the force update setting.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"str","","Get the refspec's string.",90,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"bytes","","Get the refspec's string as a byte array",90,null],[11,"is_valid_name","","Ensure the remote name is well-formed.",91,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","Get the remote's name.",91,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"name_bytes","","Get the remote's name, in bytes.",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"url","","Get the remote's url.",91,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"url_bytes","","Get the remote's url as a byte array.",91,null],[11,"pushurl","","Get the remote's pushurl.",91,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"pushurl_bytes","","Get the remote's pushurl as a byte array.",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"connect","","Open a connection to a remote.",91,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"generics":["error"],"name":"result"}}],[11,"connect_auth","","Open a connection to a remote with callbacks and proxy settings",91,{"inputs":[{"name":"self"},{"name":"direction"},{"generics":["remotecallbacks"],"name":"option"},{"generics":["proxyoptions"],"name":"option"}],"output":{"generics":["remoteconnection","error"],"name":"result"}}],[11,"connected","","Check whether the remote is connected",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"disconnect","","Disconnect from the remote",91,{"inputs":[{"name":"self"}],"output":null}],[11,"download","","Download and index the packfile",91,null],[11,"refspecs","","Get the number of refspecs for a remote",91,{"inputs":[{"name":"self"}],"output":{"name":"refspecs"}}],[11,"get_refspec","","Get the `nth` refspec from this remote.",91,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["refspec"],"name":"option"}}],[11,"fetch","","Download new data and update tips",91,null],[11,"update_tips","","Update the tips to the new state",91,{"inputs":[{"name":"self"},{"generics":["remotecallbacks"],"name":"option"},{"name":"bool"},{"name":"autotagoption"},{"generics":["str"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"push","","Perform a push",91,null],[11,"stats","","Get the statistics structure that is filled in by the fetch operation.",91,{"inputs":[{"name":"self"}],"output":{"name":"progress"}}],[11,"list","","Get the remote repository's reference advertisement list.",91,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"fetch_refspecs","","Get the remote's list of fetch refspecs",91,{"inputs":[{"name":"self"}],"output":{"generics":["stringarray","error"],"name":"result"}}],[11,"push_refspecs","","Get the remote's list of push refspecs",91,{"inputs":[{"name":"self"}],"output":{"generics":["stringarray","error"],"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"drop","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["refspec"],"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["refspec"],"name":"option"}}],[11,"is_local","","Flag if this is available locally.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"oid","","",93,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"loid","","",93,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"name","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"symref_target","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new blank set of fetch options",94,{"inputs":[],"output":{"name":"fetchoptions"}}],[11,"remote_callbacks","","Set the callbacks to use for the fetch operation.",94,{"inputs":[{"name":"self"},{"name":"remotecallbacks"}],"output":{"name":"self"}}],[11,"proxy_options","","Set the proxy options to use for the fetch operation.",94,{"inputs":[{"name":"self"},{"name":"proxyoptions"}],"output":{"name":"self"}}],[11,"prune","","Set whether to perform a prune after the fetch.",94,{"inputs":[{"name":"self"},{"name":"fetchprune"}],"output":{"name":"self"}}],[11,"update_fetchhead","","Set whether to write the results to FETCH_HEAD.",94,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"download_tags","","Set how to behave regarding tags on the remote, such as auto-downloading tags for objects we're downloading or downloading all of them.",94,{"inputs":[{"name":"self"},{"name":"autotagoption"}],"output":{"name":"self"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new blank set of push options",95,{"inputs":[],"output":{"name":"pushoptions"}}],[11,"remote_callbacks","","Set the callbacks to use for the fetch operation.",95,{"inputs":[{"name":"self"},{"name":"remotecallbacks"}],"output":{"name":"self"}}],[11,"proxy_options","","Set the proxy options to use for the fetch operation.",95,{"inputs":[{"name":"self"},{"name":"proxyoptions"}],"output":{"name":"self"}}],[11,"packbuilder_parallelism","","If the transport being used to push to the remote requires the creation of a pack file, this controls the number of worker threads used by the packbuilder when creating that pack file to be sent to the remote.",95,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"connected","","Check whether the remote is (still) connected",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"list","","Get the remote repository's reference advertisement list.",96,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new set of empty callbacks",97,{"inputs":[],"output":{"name":"remotecallbacks"}}],[11,"credentials","","The callback through which to fetch credentials if required.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"transfer_progress","","The callback through which progress is monitored.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"sideband_progress","","Textual progress from the remote.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"update_tips","","Each time a reference is updated locally, the callback will be called with information about it.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"certificate_check","","If certificate verification fails, then this callback will be invoked to let the caller make the final decision of whether to allow the connection to proceed.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"push_update_reference","","Set a callback to get invoked for each updated reference on a push.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"remotecallbacks"}}],[11,"total_objects","","Number of objects in the packfile being downloaded",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"indexed_objects","","Received objects that have been hashed",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"received_objects","","Objects which have been downloaded",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"local_objects","","Locally-available objects that have been injected in order to fix a thin pack.",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"total_deltas","","Number of deltas in the packfile being downloaded",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"indexed_deltas","","Received deltas that have been hashed.",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"received_bytes","","Size of the packfile received up to now",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_owned","","Convert this to an owned version of `Progress`.",98,{"inputs":[{"name":"self"}],"output":{"name":"progress"}}],[11,"open","","Attempt to open an already-existing repository at `path`.",99,{"inputs":[{"name":"p"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"open_bare","","Attempt to open an already-existing bare repository at `path`.",99,{"inputs":[{"name":"p"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"open_from_env","","Find and open an existing repository, respecting git environment variables.  This acts like `open_ext` with the `REPOSITORY_OPEN_FROM_ENV` flag, but additionally respects `$GIT_DIR`. With `$GIT_DIR` unset, this will search for a repository starting in the current directory.",99,{"inputs":[],"output":{"generics":["repository","error"],"name":"result"}}],[11,"open_ext","","Find and open an existing repository, with additional options.",99,{"inputs":[{"name":"p"},{"name":"repositoryopenflags"},{"name":"i"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"discover","","Attempt to open an already-existing repository at or above `path`",99,{"inputs":[{"name":"p"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"init","","Creates a new repository in the specified folder.",99,{"inputs":[{"name":"p"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"init_bare","","Creates a new `--bare` repository in the specified folder.",99,{"inputs":[{"name":"p"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"init_opts","","Creates a new `--bare` repository in the specified folder.",99,{"inputs":[{"name":"p"},{"name":"repositoryinitoptions"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"clone","","Clone a remote repository.",99,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"clone_recurse","","Clone a remote repository, initialize and update its submodules recursively.",99,{"inputs":[{"name":"str"},{"name":"p"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"from_odb","","Attempt to wrap an object database as a repository.",99,{"inputs":[{"name":"odb"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"revparse","","Execute a rev-parse operation against the `spec` listed.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["revspec","error"],"name":"result"}}],[11,"revparse_single","","Find a single object, as specified by a revision string.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["object","error"],"name":"result"}}],[11,"revparse_ext","","Find a single object and intermediate reference by a revision string.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_bare","","Tests whether this repository is a bare repository or not.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shallow","","Tests whether this repository is a shallow clone.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_worktree","","Tests whether this repository is a worktree.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Tests whether this repository is empty.",99,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"path","","Returns the path to the `.git` folder for normal repositories or the repository itself for bare repositories.",99,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"state","","Returns the current state of this repository",99,{"inputs":[{"name":"self"}],"output":{"name":"repositorystate"}}],[11,"workdir","","Get the path of the working directory for this repository.",99,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"set_workdir","","Set the path to the working directory for this repository.",99,{"inputs":[{"name":"self"},{"name":"path"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"namespace","","Get the currently active namespace for this repository.",99,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"namespace_bytes","","Get the currently active namespace for this repository as a byte array.",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_namespace","","Set the active namespace for this repository.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_namespace_bytes","","Set the active namespace for this repository as a byte array.",99,null],[11,"remove_namespace","","Remove the active namespace for this repository.",99,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"message","","Retrieves the Git merge message. Remember to remove the message when finished.",99,{"inputs":[{"name":"self"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"remove_message","","Remove the Git merge message.",99,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"remotes","","List all remotes for a given repository",99,{"inputs":[{"name":"self"}],"output":{"generics":["stringarray","error"],"name":"result"}}],[11,"find_remote","","Get the information for a particular remote",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["remote","error"],"name":"result"}}],[11,"remote","","Add a remote with the default fetch refspec to the repository's configuration.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["remote","error"],"name":"result"}}],[11,"remote_anonymous","","Create an anonymous remote",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["remote","error"],"name":"result"}}],[11,"remote_rename","","Give a remote a new name",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["stringarray","error"],"name":"result"}}],[11,"remote_delete","","Delete an existing persisted remote.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"remote_add_fetch","","Add a fetch refspec to the remote's configuration",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"remote_add_push","","Add a push refspec to the remote's configuration.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"remote_set_url","","Set the remote's url in the configuration",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"remote_set_pushurl","","Set the remote's url for pushing in the configuration.",99,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["str"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"reset","","Sets the current head to the specified object and optionally resets the index and working tree to match.",99,{"inputs":[{"name":"self"},{"name":"object"},{"name":"resettype"},{"generics":["checkoutbuilder"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"reset_default","","Updates some entries in the index from the target commit tree.",99,{"inputs":[{"name":"self"},{"generics":["object"],"name":"option"},{"name":"i"}],"output":{"generics":["error"],"name":"result"}}],[11,"head","","Retrieve and resolve the reference pointed at by HEAD.",99,{"inputs":[{"name":"self"}],"output":{"generics":["reference","error"],"name":"result"}}],[11,"set_head","","Make the repository HEAD point to the specified reference.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"head_detached","","Determines whether the repository HEAD is detached.",99,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_head_detached","","Make the repository HEAD directly point to the commit.",99,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["error"],"name":"result"}}],[11,"references","","Create an iterator for the repo's references",99,{"inputs":[{"name":"self"}],"output":{"generics":["references","error"],"name":"result"}}],[11,"references_glob","","Create an iterator for the repo's references that match the specified glob",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["references","error"],"name":"result"}}],[11,"submodules","","Load all submodules for this repository and return them.",99,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"statuses","","Gather file status information and populate the returned structure.",99,{"inputs":[{"name":"self"},{"generics":["statusoptions"],"name":"option"}],"output":{"generics":["statuses","error"],"name":"result"}}],[11,"status_should_ignore","","Test if the ignore rules apply to a given file.",99,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"status_file","","Get file status for a single file.",99,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["status","error"],"name":"result"}}],[11,"branches","","Create an iterator which loops over the requested branches.",99,{"inputs":[{"name":"self"},{"generics":["branchtype"],"name":"option"}],"output":{"generics":["branches","error"],"name":"result"}}],[11,"index","","Get the Index file for this repository.",99,{"inputs":[{"name":"self"}],"output":{"generics":["index","error"],"name":"result"}}],[11,"set_index","","Set the Index file for this repository.",99,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"config","","Get the configuration file for this repository.",99,{"inputs":[{"name":"self"}],"output":{"generics":["config","error"],"name":"result"}}],[11,"blob","","Write an in-memory buffer to the ODB as a blob.",99,null],[11,"blob_path","","Read a file from the filesystem and write its content to the Object Database as a loose blob",99,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"blob_writer","","Create a stream to write blob",99,{"inputs":[{"name":"self"},{"generics":["path"],"name":"option"}],"output":{"generics":["blobwriter","error"],"name":"result"}}],[11,"find_blob","","Lookup a reference to one of the objects in a repository.",99,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["blob","error"],"name":"result"}}],[11,"odb","","Get the object database for this repository",99,{"inputs":[{"name":"self"}],"output":{"generics":["odb","error"],"name":"result"}}],[11,"branch","","Create a new branch pointing at a target commit",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"commit"},{"name":"bool"}],"output":{"generics":["branch","error"],"name":"result"}}],[11,"find_branch","","Lookup a branch by its name in a repository.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"branchtype"}],"output":{"generics":["branch","error"],"name":"result"}}],[11,"commit","","Create new commit in the repository",99,null],[11,"commit_signed","","Create a commit object from the given buffer and signature",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"generics":["str"],"name":"option"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"extract_signature","","Extract the signature from a commit",99,{"inputs":[{"name":"self"},{"name":"oid"},{"generics":["str"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"find_commit","","Lookup a reference to one of the commits in a repository.",99,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["commit","error"],"name":"result"}}],[11,"find_annotated_commit","","Creates a `AnnotatedCommit` from the given commit id.",99,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["annotatedcommit","error"],"name":"result"}}],[11,"find_object","","Lookup a reference to one of the objects in a repository.",99,{"inputs":[{"name":"self"},{"name":"oid"},{"generics":["objecttype"],"name":"option"}],"output":{"generics":["object","error"],"name":"result"}}],[11,"reference","","Create a new direct reference.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"oid"},{"name":"bool"},{"name":"str"}],"output":{"generics":["reference","error"],"name":"result"}}],[11,"reference_matching","","Conditionally create new direct reference.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"oid"},{"name":"bool"},{"name":"oid"},{"name":"str"}],"output":{"generics":["reference","error"],"name":"result"}}],[11,"reference_symbolic","","Create a new symbolic reference.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"bool"},{"name":"str"}],"output":{"generics":["reference","error"],"name":"result"}}],[11,"reference_symbolic_matching","","Create a new symbolic reference.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"generics":["reference","error"],"name":"result"}}],[11,"find_reference","","Lookup a reference to one of the objects in a repository.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["reference","error"],"name":"result"}}],[11,"refname_to_id","","Lookup a reference by name and resolve immediately to OID.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"reference_to_annotated_commit","","Creates a git_annotated_commit from the given reference.",99,{"inputs":[{"name":"self"},{"name":"reference"}],"output":{"generics":["annotatedcommit","error"],"name":"result"}}],[11,"signature","","Create a new action signature with default user and now timestamp.",99,{"inputs":[{"name":"self"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"submodule","","Set up a new git submodule for checkout.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"path"},{"name":"bool"}],"output":{"generics":["submodule","error"],"name":"result"}}],[11,"find_submodule","","Lookup submodule information by name or path.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["submodule","error"],"name":"result"}}],[11,"submodule_status","","Get the status for a submodule.",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"submoduleignore"}],"output":{"generics":["submodulestatus","error"],"name":"result"}}],[11,"find_tree","","Lookup a reference to one of the objects in a repository.",99,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["tree","error"],"name":"result"}}],[11,"treebuilder","","Create a new TreeBuilder, optionally initialized with the entries of the given Tree.",99,{"inputs":[{"name":"self"},{"generics":["tree"],"name":"option"}],"output":{"generics":["treebuilder","error"],"name":"result"}}],[11,"tag","","Create a new tag in the repository from an object",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"object"},{"name":"signature"},{"name":"str"},{"name":"bool"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"tag_lightweight","","Create a new lightweight tag pointing at a target object",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"object"},{"name":"bool"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"find_tag","","Lookup a tag object from the repository.",99,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["tag","error"],"name":"result"}}],[11,"tag_delete","","Delete an existing tag reference.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tag_names","","Get a list with all the tags in the repository.",99,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"generics":["stringarray","error"],"name":"result"}}],[11,"checkout_head","","Updates files in the index and the working tree to match the content of the commit pointed at by HEAD.",99,{"inputs":[{"name":"self"},{"generics":["checkoutbuilder"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"checkout_index","","Updates files in the working tree to match the content of the index.",99,{"inputs":[{"name":"self"},{"generics":["index"],"name":"option"},{"generics":["checkoutbuilder"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"checkout_tree","","Updates files in the index and working tree to match the content of the tree pointed at by the treeish.",99,{"inputs":[{"name":"self"},{"name":"object"},{"generics":["checkoutbuilder"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"merge","","Merges the given commit(s) into HEAD, writing the results into the working directory. Any changes are staged for commit and any conflicts are written to the index. Callers should inspect the repository's index after this completes, resolve any conflicts and prepare a commit.",99,null],[11,"merge_commits","","Merge two commits, producing an index that reflects the result of the merge. The index may be written as-is to the working directory or checked out. If the index is to be converted to a tree, the caller should resolve any conflicts that arose as part of the merge.",99,{"inputs":[{"name":"self"},{"name":"commit"},{"name":"commit"},{"generics":["mergeoptions"],"name":"option"}],"output":{"generics":["index","error"],"name":"result"}}],[11,"merge_trees","","Merge two trees, producing an index that reflects the result of the merge. The index may be written as-is to the working directory or checked out. If the index is to be converted to a tree, the caller should resolve any conflicts that arose as part of the merge.",99,{"inputs":[{"name":"self"},{"name":"tree"},{"name":"tree"},{"name":"tree"},{"generics":["mergeoptions"],"name":"option"}],"output":{"generics":["index","error"],"name":"result"}}],[11,"cleanup_state","","Remove all the metadata associated with an ongoing command like merge, revert, cherry-pick, etc. For example: MERGE_HEAD, MERGE_MSG, etc.",99,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"merge_analysis","","Analyzes the given branch(es) and determines the opportunities for merging them into the HEAD of the repository.",99,null],[11,"note","","Add a note for an object",99,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"signature"},{"generics":["str"],"name":"option"},{"name":"oid"},{"name":"str"},{"name":"bool"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"note_default_ref","","Get the default notes reference for this repository",99,{"inputs":[{"name":"self"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"notes","","Creates a new iterator for notes in this repository.",99,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"generics":["notes","error"],"name":"result"}}],[11,"find_note","","Read the note for an object.",99,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"name":"oid"}],"output":{"generics":["note","error"],"name":"result"}}],[11,"note_delete","","Remove the note for an object.",99,{"inputs":[{"name":"self"},{"name":"oid"},{"generics":["str"],"name":"option"},{"name":"signature"},{"name":"signature"}],"output":{"generics":["error"],"name":"result"}}],[11,"revwalk","","Create a revwalk that can be used to traverse the commit graph.",99,{"inputs":[{"name":"self"}],"output":{"generics":["revwalk","error"],"name":"result"}}],[11,"blame_file","","Get the blame for a single file.",99,{"inputs":[{"name":"self"},{"name":"path"},{"generics":["blameoptions"],"name":"option"}],"output":{"generics":["blame","error"],"name":"result"}}],[11,"merge_base","","Find a merge base between two commits",99,{"inputs":[{"name":"self"},{"name":"oid"},{"name":"oid"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"merge_bases","","Find all merge bases between two commits",99,{"inputs":[{"name":"self"},{"name":"oid"},{"name":"oid"}],"output":{"generics":["oidarray","error"],"name":"result"}}],[11,"graph_ahead_behind","","Count the number of unique commits between two commit objects",99,{"inputs":[{"name":"self"},{"name":"oid"},{"name":"oid"}],"output":{"generics":["error"],"name":"result"}}],[11,"graph_descendant_of","","Determine if a commit is the descendant of another commit",99,{"inputs":[{"name":"self"},{"name":"oid"},{"name":"oid"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"reflog","","Read the reflog for the given reference",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["reflog","error"],"name":"result"}}],[11,"reflog_delete","","Delete the reflog for the given reference",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"reflog_rename","","Rename a reflog",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"reference_has_log","","Check if the given reference has a reflog.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"reference_ensure_log","","Ensure that the given reference has a reflog.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"describe","","Describes a commit",99,{"inputs":[{"name":"self"},{"name":"describeoptions"}],"output":{"generics":["describe","error"],"name":"result"}}],[11,"diff_tree_to_tree","","Create a diff with the difference between two tree objects.",99,{"inputs":[{"name":"self"},{"generics":["tree"],"name":"option"},{"generics":["tree"],"name":"option"},{"generics":["diffoptions"],"name":"option"}],"output":{"generics":["diff","error"],"name":"result"}}],[11,"diff_tree_to_index","","Create a diff between a tree and repository index.",99,{"inputs":[{"name":"self"},{"generics":["tree"],"name":"option"},{"generics":["index"],"name":"option"},{"generics":["diffoptions"],"name":"option"}],"output":{"generics":["diff","error"],"name":"result"}}],[11,"diff_index_to_index","","Create a diff between two index objects.",99,{"inputs":[{"name":"self"},{"name":"index"},{"name":"index"},{"generics":["diffoptions"],"name":"option"}],"output":{"generics":["diff","error"],"name":"result"}}],[11,"diff_index_to_workdir","","Create a diff between the repository index and the workdir directory.",99,{"inputs":[{"name":"self"},{"generics":["index"],"name":"option"},{"generics":["diffoptions"],"name":"option"}],"output":{"generics":["diff","error"],"name":"result"}}],[11,"diff_tree_to_workdir","","Create a diff between a tree and the working directory.",99,{"inputs":[{"name":"self"},{"generics":["tree"],"name":"option"},{"generics":["diffoptions"],"name":"option"}],"output":{"generics":["diff","error"],"name":"result"}}],[11,"diff_tree_to_workdir_with_index","","Create a diff between a tree and the working directory using index data to account for staged deletes, tracked files, etc.",99,{"inputs":[{"name":"self"},{"generics":["tree"],"name":"option"},{"generics":["diffoptions"],"name":"option"}],"output":{"generics":["diff","error"],"name":"result"}}],[11,"packbuilder","","Create a PackBuilder",99,{"inputs":[{"name":"self"}],"output":{"generics":["packbuilder","error"],"name":"result"}}],[11,"stash_save","","Save the local modifications to a new stash.",99,{"inputs":[{"name":"self"},{"name":"signature"},{"name":"str"},{"generics":["stashflags"],"name":"option"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"stash_apply","","Apply a single stashed state from the stash list.",99,{"inputs":[{"name":"self"},{"name":"usize"},{"generics":["stashapplyoptions"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"stash_foreach","","Loop over all the stashed states and issue a callback for each one.",99,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"generics":["error"],"name":"result"}}],[11,"stash_drop","","Remove a single stashed state from the stash list.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"stash_pop","","Apply a single stashed state from the stash list and remove it from the list if successful.",99,{"inputs":[{"name":"self"},{"name":"usize"},{"generics":["stashapplyoptions"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_ignore_rule","","Add ignore rules for a repository.",99,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"clear_ignore_rules","","Clear ignore rules that were explicitly added.",99,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_path_ignored","","Test if the ignore rules apply to a given path.",99,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"drop","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a default set of initialization options.",100,{"inputs":[],"output":{"name":"repositoryinitoptions"}}],[11,"bare","","Create a bare repository with no working directory.",100,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"no_reinit","","Return an error if the repository path appears to already be a git repository.",100,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"no_dotgit_dir","","Normally a '/.git/' will be appended to the repo path for non-bare repos (if it is not already there), but passing this flag prevents that behavior.",100,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"mkdir","","Make the repo path (and workdir path) as needed. The \".git\" directory will always be created regardless of this flag.",100,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"mkpath","","Recursively make all components of the repo and workdir path sas necessary.",100,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"mode","","Set to one of the `RepositoryInit` constants, or a custom value.",100,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitoptions"}}],[11,"external_template","","Enable or disable using external templates.",100,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"repositoryinitoptions"}}],[11,"workdir_path","","The path do the working directory.",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"repositoryinitoptions"}}],[11,"description","","If set, this will be used to initialize the \"description\" file in the repository instead of using the template content.",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"repositoryinitoptions"}}],[11,"template_path","","When the `external_template` option is set, this is the first location to check for the template directory.",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"repositoryinitoptions"}}],[11,"initial_head","","The name of the head to point HEAD at.",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"repositoryinitoptions"}}],[11,"origin_url","","If set, then after the rest of the repository initialization is completed an `origin` remote will be added pointing to this URL.",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"repositoryinitoptions"}}],[11,"raw","","Creates a set of raw init options to be used with `git_repository_init_ext`.",100,{"inputs":[{"name":"self"}],"output":{"name":"git_repository_init_options"}}],[11,"from_objects","","Assembles a new revspec from the from/to components.",101,{"inputs":[{"generics":["object"],"name":"option"},{"generics":["object"],"name":"option"},{"name":"revparsemode"}],"output":{"name":"revspec"}}],[11,"from","","Access the `from` range of this revspec.",101,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"to","","Access the `to` range of this revspec.",101,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"mode","","Returns the intent of the revspec.",101,{"inputs":[{"name":"self"}],"output":{"name":"revparsemode"}}],[11,"reset","","Reset a revwalk to allow re-configuring it.",102,{"inputs":[{"name":"self"}],"output":null}],[11,"set_sorting","","Set the order in which commits are visited.",102,{"inputs":[{"name":"self"},{"name":"sort"}],"output":null}],[11,"simplify_first_parent","","Simplify the history by first-parent",102,{"inputs":[{"name":"self"}],"output":null}],[11,"push","","Mark a commit to start traversal from.",102,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["error"],"name":"result"}}],[11,"push_head","","Push the repository's HEAD",102,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"push_glob","","Push matching references",102,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"push_range","","Push and hide the respective endpoints of the given range.",102,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"push_ref","","Push the OID pointed to by a reference",102,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"hide","","Mark a commit as not of interest to this revwalk.",102,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["error"],"name":"result"}}],[11,"hide_head","","Hide the repository's HEAD",102,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"hide_glob","","Hide matching references.",102,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"hide_ref","","Hide the OID pointed to by a reference.",102,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"now","","Create a new action signature with a timestamp of 'now'.",103,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"new","","Create a new action signature.",103,{"inputs":[{"name":"str"},{"name":"str"},{"name":"time"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"name","","Gets the name on the signature.",103,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"name_bytes","","Gets the name on the signature as a byte slice.",103,null],[11,"email","","Gets the email on the signature.",103,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"email_bytes","","Gets the email on the signature as a byte slice.",103,null],[11,"when","","Get the `when` of this signature.",103,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"to_owned","","Convert a signature of any lifetime into an owned signature with a static lifetime.",103,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"drop","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"statusshow"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new blank set of status options.",104,{"inputs":[],"output":{"name":"statusoptions"}}],[11,"show","","Select the files on which to report status.",104,{"inputs":[{"name":"self"},{"name":"statusshow"}],"output":{"name":"statusoptions"}}],[11,"pathspec","","Add a path pattern to match (using fnmatch-style matching).",104,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"statusoptions"}}],[11,"include_untracked","","Flag whether untracked files will be included.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_ignored","","Flag whether ignored files will be included.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_unmodified","","Flag to include unmodified files.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"exclude_submodules","","Flag that submodules should be skipped.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"recurse_untracked_dirs","","Flag that all files in untracked directories should be included.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"disable_pathspec_match","","Indicates that the given paths should be treated as literals paths, note patterns.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"recurse_ignored_dirs","","Indicates that the contents of ignored directories should be included in the status.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"renames_head_to_index","","Indicates that rename detection should be processed between the head.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"renames_index_to_workdir","","Indicates that rename detection should be run between the index and the working directory.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"sort_case_sensitively","","Override the native case sensitivity for the file system and force the output to be in case sensitive order.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"sort_case_insensitively","","Override the native case sensitivity for the file system and force the output to be in case-insensitive order.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"renames_from_rewrites","","Indicates that rename detection should include rewritten files.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"no_refresh","","Bypasses the default status behavior of doing a \"soft\" index reload.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"update_index","","Refresh the stat cache in the index for files are unchanged but have out of date stat information in the index.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_unreadable","","",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"include_unreadable_as_untracked","","",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"statusoptions"}}],[11,"raw","","Get a pointer to the inner list of status options.",104,null],[11,"get","","Gets a status entry from this list at the specified index.",105,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["statusentry"],"name":"option"}}],[11,"len","","Gets the count of status entries in this list.",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return `true` if there is no status entry in this list.",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the statuses in this list.",105,{"inputs":[{"name":"self"}],"output":{"name":"statusiter"}}],[11,"drop","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["statusentry"],"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["statusentry"],"name":"option"}}],[11,"path_bytes","","Access the bytes for this entry's corresponding pathname",107,null],[11,"path","","Access this entry's path name as a string.",107,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"status","","Access the status flags for this file",107,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"head_to_index","","Access detailed information about the differences between the file in HEAD and the file in the index.",107,{"inputs":[{"name":"self"}],"output":{"generics":["diffdelta"],"name":"option"}}],[11,"index_to_workdir","","Access detailed information about the differences between the file in the index and the file in the working directory.",107,{"inputs":[{"name":"self"}],"output":{"generics":["diffdelta"],"name":"option"}}],[11,"branch","","Get the submodule's branch.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"branch_bytes","","Get the branch for the submodule.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"url","","Get the submodule's url.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"url_bytes","","Get the url for the submodule.",108,null],[11,"name","","Get the submodule's name.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"name_bytes","","Get the name for the submodule.",108,null],[11,"path","","Get the path for the submodule.",108,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"head_id","","Get the OID for the submodule in the current HEAD tree.",108,{"inputs":[{"name":"self"}],"output":{"generics":["oid"],"name":"option"}}],[11,"index_id","","Get the OID for the submodule in the index.",108,{"inputs":[{"name":"self"}],"output":{"generics":["oid"],"name":"option"}}],[11,"workdir_id","","Get the OID for the submodule in the current working directory.",108,{"inputs":[{"name":"self"}],"output":{"generics":["oid"],"name":"option"}}],[11,"init","","Copy submodule info into \".git/config\" file.",108,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"open","","Open the repository for a submodule.",108,{"inputs":[{"name":"self"}],"output":{"generics":["repository","error"],"name":"result"}}],[11,"reload","","Reread submodule info from config, index, and HEAD.",108,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"sync","","Copy submodule remote info into submodule repo.",108,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_to_index","","Add current submodule HEAD commit to index of superproject.",108,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_finalize","","Resolve the setup of a new git submodule.",108,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"update","","Update submodule.",108,{"inputs":[{"name":"self"},{"name":"bool"},{"generics":["submoduleupdateoptions"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Return default options.",109,{"inputs":[],"output":{"name":"self"}}],[11,"checkout","","Set checkout options.",109,{"inputs":[{"name":"self"},{"name":"checkoutbuilder"}],"output":{"name":"self"}}],[11,"fetch","","Set fetch options and allow fetching.",109,{"inputs":[{"name":"self"},{"name":"fetchoptions"}],"output":{"name":"self"}}],[11,"allow_fetch","","Allow or disallow fetching.",109,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a default set of merge options.",110,{"inputs":[],"output":{"name":"stashapplyoptions"}}],[11,"reinstantiate_index","","Set stash application flag to GIT_STASH_APPLY_REINSTATE_INDEX",110,{"inputs":[{"name":"self"}],"output":{"name":"stashapplyoptions"}}],[11,"checkout_options","","Options to use when writing files to the working directory",110,{"inputs":[{"name":"self"},{"name":"checkoutbuilder"}],"output":{"name":"stashapplyoptions"}}],[11,"progress_cb","","Optional callback to notify the consumer of application progress.",110,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"stashapplyoptions"}}],[11,"raw","","Pointer to a raw git_stash_apply_options",110,{"inputs":[{"name":"self"}],"output":{"name":"git_stash_apply_options"}}],[11,"id","","Get the id (SHA1) of a repository tag",111,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"message","","Get the message of a tag",111,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"message_bytes","","Get the message of a tag",111,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name","","Get the name of a tag",111,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"name_bytes","","Get the name of a tag",111,null],[11,"peel","","Recursively peel a tag until a non tag git_object is found",111,{"inputs":[{"name":"self"}],"output":{"generics":["object","error"],"name":"result"}}],[11,"tagger","","Get the tagger (author) of a tag",111,{"inputs":[{"name":"self"}],"output":{"generics":["signature"],"name":"option"}}],[11,"target","","Get the tagged object of a tag",111,{"inputs":[{"name":"self"}],"output":{"generics":["object","error"],"name":"result"}}],[11,"target_id","","Get the OID of the tagged object of a tag",111,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"target_type","","Get the OID of the tagged object of a tag",111,{"inputs":[{"name":"self"}],"output":{"generics":["objecttype"],"name":"option"}}],[11,"as_object","","Casts this Tag to be usable as an `Object`",111,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"into_object","","Consumes Tag to be returned as an `Object`",111,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",111,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"time"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"indextime"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"indextime"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"indextime"}],"output":{"name":"bool"}}],[11,"new","","Creates a new time structure from its components.",112,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"time"}}],[11,"seconds","","Return the time, in seconds, from epoch",112,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"offset_minutes","","Return the timezone offset, in minutes",112,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"sign","","Return whether the offset was positive or negative. Primarily useful in case the offset is specified as a negative zero.",112,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",112,{"inputs":[{"name":"self"},{"name":"time"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new time structure from its components.",113,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"indextime"}}],[11,"seconds","","Returns the number of seconds in the second component of this time.",113,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"nanoseconds","","Returns the nanosecond component of this time.",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"self"},{"name":"indextime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",113,{"inputs":[{"name":"self"},{"name":"indextime"}],"output":{"name":"ordering"}}],[11,"id","","Get the id (SHA1) of a repository object",114,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"len","","Get the number of entries listed in this tree.",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return `true` if there is not entry",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the entries in this tree.",114,{"inputs":[{"name":"self"}],"output":{"name":"treeiter"}}],[11,"get_id","","Lookup a tree entry by SHA value.",114,{"inputs":[{"name":"self"},{"name":"oid"}],"output":{"generics":["treeentry"],"name":"option"}}],[11,"get","","Lookup a tree entry by its position in the tree",114,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["treeentry"],"name":"option"}}],[11,"get_name","","Lookup a tree entry by its filename",114,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["treeentry"],"name":"option"}}],[11,"get_path","","Retrieve a tree entry contained in a tree or in any of its subtrees, given its relative path.",114,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["treeentry","error"],"name":"result"}}],[11,"as_object","","Casts this Tree to be usable as an `Object`",114,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"into_object","","Consumes Commit to be returned as an `Object`",114,{"inputs":[{"name":"self"}],"output":{"name":"object"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"id","","Get the id of the object pointed by the entry",115,{"inputs":[{"name":"self"}],"output":{"name":"oid"}}],[11,"name","","Get the filename of a tree entry",115,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"name_bytes","","Get the filename of a tree entry",115,null],[11,"to_object","","Convert a tree entry to the object it points to.",115,{"inputs":[{"name":"self"},{"name":"repository"}],"output":{"generics":["object","error"],"name":"result"}}],[11,"kind","","Get the type of the object pointed by the entry",115,{"inputs":[{"name":"self"}],"output":{"generics":["objecttype"],"name":"option"}}],[11,"filemode","","Get the UNIX file attributes of a tree entry",115,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"filemode_raw","","Get the raw UNIX file attributes of a tree entry",115,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_owned","","Convert this entry of any lifetime into an owned signature with a static lifetime.",115,{"inputs":[{"name":"self"}],"output":{"name":"treeentry"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"treeentry"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"self"},{"name":"treeentry"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",115,{"inputs":[{"name":"self"},{"name":"treeentry"}],"output":{"name":"ordering"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"treeentry"}],"output":{"name":"bool"}}],[11,"drop","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["treeentry"],"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["treeentry"],"name":"option"}}],[11,"clear","","Clear all the entries in the builder",117,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Get the number of entries",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return `true` if there is no entry",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Get en entry from the builder from its filename",117,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"insert","","Add or update an entry in the builder",117,{"inputs":[{"name":"self"},{"name":"p"},{"name":"oid"},{"name":"i32"}],"output":{"generics":["treeentry","error"],"name":"result"}}],[11,"remove","","Remove an entry from the builder by its filename",117,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[11,"filter","","Selectively remove entries from the tree",117,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"write","","Write the contents of the TreeBuilder as a Tree object and return its Oid",117,{"inputs":[{"name":"self"}],"output":{"generics":["oid","error"],"name":"result"}}],[11,"drop","","",117,{"inputs":[{"name":"self"}],"output":null}],[6,"IndexMatchedPath","","A callback function to filter index matches.",null,null],[6,"Credentials","","Callback used to acquire credentials for when a remote is fetched.",null,null],[6,"TransferProgress","","Callback to be invoked while a transfer is in progress.",null,null],[6,"TransportMessage","","Callback for receiving messages delivered by the transport.",null,null],[6,"UpdateTips","","Callback for whenever a reference is updated locally.",null,null],[6,"StashCb","","This is a callback function you can provide to iterate over all the stashed states that will be invoked per entry.",null,null],[6,"StashApplyProgressCb","","Stash application progress notification function.",null,null],[17,"DEFAULT_COMMENT_CHAR","","The default comment character for `message_prettify` ('#')",null,null],[8,"IntoCString","","A class of types that can be converted to C strings.",null,null],[10,"into_c_string","","Consume this container, converting it into a CString",118,{"inputs":[{"name":"self"}],"output":{"generics":["cstring","error"],"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"errorclass"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"errorclass"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"repositorystate"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"repositorystate"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"resettype"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"objecttype"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"objecttype"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"referencetype"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"referencetype"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"branchtype"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"branchtype"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"configlevel"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"configlevel"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"filefavor"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"filefavor"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"sort"}}],[11,"partial_cmp","","",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"cmp","","",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"ordering"}}],[11,"hash","","",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","Sort the repository contents in no particular ordering.",119,null],[18,"TOPOLOGICAL","","Sort the repository contents in topological order (parents before children).",119,null],[18,"TIME","","Sort the repository contents by commit time.",119,null],[18,"REVERSE","","Iterate through the repository contents in reverse order.",119,null],[11,"empty","","Returns an empty set of flags.",119,{"inputs":[],"output":{"name":"sort"}}],[11,"all","","Returns the set containing all flags.",119,{"inputs":[],"output":{"name":"sort"}}],[11,"bits","","Returns the raw value of the flags currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",119,{"inputs":[{"name":"u32"}],"output":{"generics":["sort"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",119,{"inputs":[{"name":"u32"}],"output":{"name":"sort"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",119,{"inputs":[{"name":"self"},{"name":"sort"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"bitor_assign","","Adds the set of flags.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"bitxor_assign","","Toggles the set of flags.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":{"name":"sort"}}],[11,"sub_assign","","Disables all flags enabled in the set.",119,{"inputs":[{"name":"self"},{"name":"sort"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",119,{"inputs":[{"name":"self"}],"output":{"name":"sort"}}],[11,"extend","","",119,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",119,{"inputs":[{"name":"t"}],"output":{"name":"sort"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"credentialtype"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"cmp","","",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"ordering"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"USER_PASS_PLAINTEXT","","",120,null],[18,"SSH_KEY","","",120,null],[18,"SSH_MEMORY","","",120,null],[18,"SSH_CUSTOM","","",120,null],[18,"DEFAULT","","",120,null],[18,"SSH_INTERACTIVE","","",120,null],[18,"USERNAME","","",120,null],[11,"empty","","Returns an empty set of flags.",120,{"inputs":[],"output":{"name":"credentialtype"}}],[11,"all","","Returns the set containing all flags.",120,{"inputs":[],"output":{"name":"credentialtype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",120,{"inputs":[{"name":"u32"}],"output":{"generics":["credentialtype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",120,{"inputs":[{"name":"u32"}],"output":{"name":"credentialtype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"bitor_assign","","Adds the set of flags.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"bitxor_assign","","Toggles the set of flags.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":{"name":"credentialtype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",120,{"inputs":[{"name":"self"},{"name":"credentialtype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",120,{"inputs":[{"name":"self"}],"output":{"name":"credentialtype"}}],[11,"extend","","",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",120,{"inputs":[{"name":"t"}],"output":{"name":"credentialtype"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"indexentryflag"}}],[11,"partial_cmp","","",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"bool"}}],[11,"le","","",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"bool"}}],[11,"gt","","",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"bool"}}],[11,"ge","","",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"bool"}}],[11,"cmp","","",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"ordering"}}],[11,"hash","","",121,null],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"EXTENDED","","Set when the `extended_flags` field is valid.",121,null],[18,"VALID","","\"Assume valid\" flag",121,null],[11,"empty","","Returns an empty set of flags.",121,{"inputs":[],"output":{"name":"indexentryflag"}}],[11,"all","","Returns the set containing all flags.",121,{"inputs":[],"output":{"name":"indexentryflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",121,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",121,{"inputs":[{"name":"u16"}],"output":{"generics":["indexentryflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",121,{"inputs":[{"name":"u16"}],"output":{"name":"indexentryflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"indexentryflag"}}],[11,"bitor_assign","","Adds the set of flags.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"indexentryflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"indexentryflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":{"name":"indexentryflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",121,{"inputs":[{"name":"self"},{"name":"indexentryflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",121,{"inputs":[{"name":"self"}],"output":{"name":"indexentryflag"}}],[11,"extend","","",121,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",121,{"inputs":[{"name":"t"}],"output":{"name":"indexentryflag"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"indexentryextendedflag"}}],[11,"partial_cmp","","",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"bool"}}],[11,"le","","",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"bool"}}],[11,"gt","","",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"bool"}}],[11,"ge","","",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"bool"}}],[11,"cmp","","",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"ordering"}}],[11,"hash","","",122,null],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"INTENT_TO_ADD","","An \"intent to add\" entry from \"git add -N\"",122,null],[18,"SKIP_WORKTREE","","Skip the associated worktree file, for sparse checkouts",122,null],[18,"EXTENDED2","","Reserved for a future on-disk extended flag",122,null],[18,"UPDATE","","",122,null],[18,"REMOVE","","",122,null],[18,"UPTODATE","","",122,null],[18,"ADDED","","",122,null],[18,"HASHED","","",122,null],[18,"UNHASHED","","",122,null],[18,"WT_REMOVE","","",122,null],[18,"CONFLICTED","","",122,null],[18,"UNPACKED","","",122,null],[18,"NEW_SKIP_WORKTREE","","",122,null],[11,"empty","","Returns an empty set of flags.",122,{"inputs":[],"output":{"name":"indexentryextendedflag"}}],[11,"all","","Returns the set containing all flags.",122,{"inputs":[],"output":{"name":"indexentryextendedflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",122,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",122,{"inputs":[{"name":"u16"}],"output":{"generics":["indexentryextendedflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",122,{"inputs":[{"name":"u16"}],"output":{"name":"indexentryextendedflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"indexentryextendedflag"}}],[11,"bitor_assign","","Adds the set of flags.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"indexentryextendedflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"indexentryextendedflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":{"name":"indexentryextendedflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",122,{"inputs":[{"name":"self"},{"name":"indexentryextendedflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",122,{"inputs":[{"name":"self"}],"output":{"name":"indexentryextendedflag"}}],[11,"extend","","",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",122,{"inputs":[{"name":"t"}],"output":{"name":"indexentryextendedflag"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"indexaddoption"}}],[11,"partial_cmp","","",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"le","","",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"gt","","",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"ge","","",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"cmp","","",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"ordering"}}],[11,"hash","","",123,null],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",123,null],[18,"FORCE","","",123,null],[18,"DISABLE_PATHSPEC_MATCH","","",123,null],[18,"CHECK_PATHSPEC","","",123,null],[11,"empty","","Returns an empty set of flags.",123,{"inputs":[],"output":{"name":"indexaddoption"}}],[11,"all","","Returns the set containing all flags.",123,{"inputs":[],"output":{"name":"indexaddoption"}}],[11,"bits","","Returns the raw value of the flags currently stored.",123,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",123,{"inputs":[{"name":"u32"}],"output":{"generics":["indexaddoption"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",123,{"inputs":[{"name":"u32"}],"output":{"name":"indexaddoption"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"bitor_assign","","Adds the set of flags.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"bitxor_assign","","Toggles the set of flags.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":{"name":"indexaddoption"}}],[11,"sub_assign","","Disables all flags enabled in the set.",123,{"inputs":[{"name":"self"},{"name":"indexaddoption"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",123,{"inputs":[{"name":"self"}],"output":{"name":"indexaddoption"}}],[11,"extend","","",123,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",123,{"inputs":[{"name":"t"}],"output":{"name":"indexaddoption"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"repositoryopenflags"}}],[11,"partial_cmp","","",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"le","","",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"gt","","",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"ge","","",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"cmp","","",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"ordering"}}],[11,"hash","","",124,null],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NO_SEARCH","","Only open the specified path; don't walk upward searching.",124,null],[18,"CROSS_FS","","Search across filesystem boundaries.",124,null],[18,"BARE","","Force opening as bare repository, and defer loading its config.",124,null],[18,"NO_DOTGIT","","Don't try appending `/.git` to the specified repository path.",124,null],[18,"FROM_ENV","","Respect environment variables like `$GIT_DIR`.",124,null],[11,"empty","","Returns an empty set of flags.",124,{"inputs":[],"output":{"name":"repositoryopenflags"}}],[11,"all","","Returns the set containing all flags.",124,{"inputs":[],"output":{"name":"repositoryopenflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",124,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",124,{"inputs":[{"name":"u32"}],"output":{"generics":["repositoryopenflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",124,{"inputs":[{"name":"u32"}],"output":{"name":"repositoryopenflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"bitor_assign","","Adds the set of flags.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":{"name":"repositoryopenflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",124,{"inputs":[{"name":"self"},{"name":"repositoryopenflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",124,{"inputs":[{"name":"self"}],"output":{"name":"repositoryopenflags"}}],[11,"extend","","",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",124,{"inputs":[{"name":"t"}],"output":{"name":"repositoryopenflags"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"revparsemode"}}],[11,"partial_cmp","","",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"le","","",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"gt","","",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"ge","","",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"cmp","","",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"ordering"}}],[11,"hash","","",125,null],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SINGLE","","The spec targeted a single object",125,null],[18,"RANGE","","The spec targeted a range of commits",125,null],[18,"MERGE_BASE","","The spec used the `...` operator, which invokes special semantics.",125,null],[11,"empty","","Returns an empty set of flags.",125,{"inputs":[],"output":{"name":"revparsemode"}}],[11,"all","","Returns the set containing all flags.",125,{"inputs":[],"output":{"name":"revparsemode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",125,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",125,{"inputs":[{"name":"u32"}],"output":{"generics":["revparsemode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",125,{"inputs":[{"name":"u32"}],"output":{"name":"revparsemode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"bitor_assign","","Adds the set of flags.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"bitxor_assign","","Toggles the set of flags.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":{"name":"revparsemode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",125,{"inputs":[{"name":"self"},{"name":"revparsemode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",125,{"inputs":[{"name":"self"}],"output":{"name":"revparsemode"}}],[11,"extend","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",125,{"inputs":[{"name":"t"}],"output":{"name":"revparsemode"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"mergeanalysis"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"bool"}}],[11,"le","","",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"bool"}}],[11,"gt","","",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"bool"}}],[11,"ge","","",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"bool"}}],[11,"cmp","","",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"ordering"}}],[11,"hash","","",126,null],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ANALYSIS_NONE","","No merge is possible.",126,null],[18,"ANALYSIS_NORMAL","","A \"normal\" merge; both HEAD and the given merge input have diverged from their common ancestor. The divergent commits must be merged.",126,null],[18,"ANALYSIS_UP_TO_DATE","","All given merge inputs are reachable from HEAD, meaning the repository is up-to-date and no merge needs to be performed.",126,null],[18,"ANALYSIS_FASTFORWARD","","The given merge input is a fast-forward from HEAD and no merge needs to be performed.  Instead, the client can check out the given merge input.",126,null],[18,"ANALYSIS_UNBORN","","The HEAD of the current repository is \"unborn\" and does not point to a valid commit.  No merge can be performed, but the caller may wish to simply set HEAD to the target commit(s).",126,null],[11,"empty","","Returns an empty set of flags.",126,{"inputs":[],"output":{"name":"mergeanalysis"}}],[11,"all","","Returns the set containing all flags.",126,{"inputs":[],"output":{"name":"mergeanalysis"}}],[11,"bits","","Returns the raw value of the flags currently stored.",126,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",126,{"inputs":[{"name":"u32"}],"output":{"generics":["mergeanalysis"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",126,{"inputs":[{"name":"u32"}],"output":{"name":"mergeanalysis"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"mergeanalysis"}}],[11,"bitor_assign","","Adds the set of flags.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"mergeanalysis"}}],[11,"bitxor_assign","","Toggles the set of flags.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"mergeanalysis"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":{"name":"mergeanalysis"}}],[11,"sub_assign","","Disables all flags enabled in the set.",126,{"inputs":[{"name":"self"},{"name":"mergeanalysis"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",126,{"inputs":[{"name":"self"}],"output":{"name":"mergeanalysis"}}],[11,"extend","","",126,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",126,{"inputs":[{"name":"t"}],"output":{"name":"mergeanalysis"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"mergepreference"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"bool"}}],[11,"le","","",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"bool"}}],[11,"gt","","",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"bool"}}],[11,"ge","","",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"bool"}}],[11,"cmp","","",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"ordering"}}],[11,"hash","","",127,null],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","No configuration was found that suggests a preferred behavior for merge.",127,null],[18,"NO_FAST_FORWARD","","There is a `merge.ff=false` configuration setting, suggesting that the user does not want to allow a fast-forward merge.",127,null],[18,"FASTFORWARD_ONLY","","There is a `merge.ff=only` configuration setting, suggesting that the user only wants fast-forward merges.",127,null],[11,"empty","","Returns an empty set of flags.",127,{"inputs":[],"output":{"name":"mergepreference"}}],[11,"all","","Returns the set containing all flags.",127,{"inputs":[],"output":{"name":"mergepreference"}}],[11,"bits","","Returns the raw value of the flags currently stored.",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",127,{"inputs":[{"name":"u32"}],"output":{"generics":["mergepreference"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",127,{"inputs":[{"name":"u32"}],"output":{"name":"mergepreference"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"mergepreference"}}],[11,"bitor_assign","","Adds the set of flags.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"mergepreference"}}],[11,"bitxor_assign","","Toggles the set of flags.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"mergepreference"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":{"name":"mergepreference"}}],[11,"sub_assign","","Disables all flags enabled in the set.",127,{"inputs":[{"name":"self"},{"name":"mergepreference"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",127,{"inputs":[{"name":"self"}],"output":{"name":"mergepreference"}}],[11,"extend","","",127,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",127,{"inputs":[{"name":"t"}],"output":{"name":"mergepreference"}}],[11,"str","","Convert an object type to its string representation.",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_loose","","Determine if the given git_otype is a valid loose object type.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw","","Convert a raw git_otype to an ObjectType",10,{"inputs":[{"name":"git_otype"}],"output":{"generics":["objecttype"],"name":"option"}}],[11,"raw","","Convert this kind into its raw representation",10,{"inputs":[{"name":"self"}],"output":{"name":"git_otype"}}],[11,"from_str","","Convert a string object type representation to its object type.",10,{"inputs":[{"name":"str"}],"output":{"generics":["objecttype"],"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"str","","Convert an object type to its string representation.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_raw","","Convert a raw git_ref_t to a ReferenceType.",11,{"inputs":[{"name":"git_ref_t"}],"output":{"generics":["referencetype"],"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","Converts a raw configuration level to a ConfigLevel",13,{"inputs":[{"name":"git_config_level_t"}],"output":{"name":"configlevel"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"partial_cmp","","",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"le","","",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"gt","","",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ge","","",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"cmp","","",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"ordering"}}],[11,"hash","","",128,null],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CURRENT","","",128,null],[18,"INDEX_NEW","","",128,null],[18,"INDEX_MODIFIED","","",128,null],[18,"INDEX_DELETED","","",128,null],[18,"INDEX_RENAMED","","",128,null],[18,"INDEX_TYPECHANGE","","",128,null],[18,"WT_NEW","","",128,null],[18,"WT_MODIFIED","","",128,null],[18,"WT_DELETED","","",128,null],[18,"WT_TYPECHANGE","","",128,null],[18,"WT_RENAMED","","",128,null],[18,"IGNORED","","",128,null],[18,"CONFLICTED","","",128,null],[11,"empty","","Returns an empty set of flags.",128,{"inputs":[],"output":{"name":"status"}}],[11,"all","","Returns the set containing all flags.",128,{"inputs":[],"output":{"name":"status"}}],[11,"bits","","Returns the raw value of the flags currently stored.",128,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",128,{"inputs":[{"name":"u32"}],"output":{"generics":["status"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",128,{"inputs":[{"name":"u32"}],"output":{"name":"status"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",128,{"inputs":[{"name":"self"},{"name":"status"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitor_assign","","Adds the set of flags.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitxor_assign","","Toggles the set of flags.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"status"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"status"}}],[11,"sub_assign","","Disables all flags enabled in the set.",128,{"inputs":[{"name":"self"},{"name":"status"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",128,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"extend","","",128,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",128,{"inputs":[{"name":"t"}],"output":{"name":"status"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"repositoryinitmode"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"le","","",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"gt","","",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"ge","","",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"cmp","","",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"ordering"}}],[11,"hash","","",129,null],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SHARED_UMASK","","Use permissions configured by umask - the default",129,null],[18,"SHARED_GROUP","","Use `--shared=group` behavior, chmod'ing the new repo to be group writable and \"g+sx\" for sticky group assignment",129,null],[18,"SHARED_ALL","","Use `--shared=all` behavior, adding world readability.",129,null],[11,"empty","","Returns an empty set of flags.",129,{"inputs":[],"output":{"name":"repositoryinitmode"}}],[11,"all","","Returns the set containing all flags.",129,{"inputs":[],"output":{"name":"repositoryinitmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",129,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",129,{"inputs":[{"name":"u32"}],"output":{"generics":["repositoryinitmode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",129,{"inputs":[{"name":"u32"}],"output":{"name":"repositoryinitmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"bitor_assign","","Adds the set of flags.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"bitxor_assign","","Toggles the set of flags.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":{"name":"repositoryinitmode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",129,{"inputs":[{"name":"self"},{"name":"repositoryinitmode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",129,{"inputs":[{"name":"self"}],"output":{"name":"repositoryinitmode"}}],[11,"extend","","",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",129,{"inputs":[{"name":"t"}],"output":{"name":"repositoryinitmode"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delta"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delta"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"submodulestatus"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"le","","",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"gt","","",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"ge","","",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"cmp","","",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"ordering"}}],[11,"hash","","",130,null],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IN_HEAD","","",130,null],[18,"IN_INDEX","","",130,null],[18,"IN_CONFIG","","",130,null],[18,"IN_WD","","",130,null],[18,"INDEX_ADDED","","",130,null],[18,"INDEX_DELETED","","",130,null],[18,"INDEX_MODIFIED","","",130,null],[18,"WD_UNINITIALIZED","","",130,null],[18,"WD_ADDED","","",130,null],[18,"WD_DELETED","","",130,null],[18,"WD_MODIFIED","","",130,null],[18,"WD_INDEX_MODIFIED","","",130,null],[18,"WD_WD_MODIFIED","","",130,null],[18,"WD_UNTRACKED","","",130,null],[11,"empty","","Returns an empty set of flags.",130,{"inputs":[],"output":{"name":"submodulestatus"}}],[11,"all","","Returns the set containing all flags.",130,{"inputs":[],"output":{"name":"submodulestatus"}}],[11,"bits","","Returns the raw value of the flags currently stored.",130,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",130,{"inputs":[{"name":"u32"}],"output":{"generics":["submodulestatus"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",130,{"inputs":[{"name":"u32"}],"output":{"name":"submodulestatus"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"bitor_assign","","Adds the set of flags.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"bitxor_assign","","Toggles the set of flags.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":{"name":"submodulestatus"}}],[11,"sub_assign","","Disables all flags enabled in the set.",130,{"inputs":[{"name":"self"},{"name":"submodulestatus"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",130,{"inputs":[{"name":"self"}],"output":{"name":"submodulestatus"}}],[11,"extend","","",130,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",130,{"inputs":[{"name":"t"}],"output":{"name":"submodulestatus"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"pathspecflags"}}],[11,"partial_cmp","","",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"le","","",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"gt","","",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"ge","","",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"cmp","","",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"ordering"}}],[11,"hash","","",131,null],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","Use the default pathspec matching configuration.",131,null],[18,"IGNORE_CASE","","Force matching to ignore case, otherwise matching will use native case sensitivity fo the platform filesystem.",131,null],[18,"USE_CASE","","Force case sensitive matches, otherwise match will use the native case sensitivity of the platform filesystem.",131,null],[18,"NO_GLOB","","Disable glob patterns and just use simple string comparison for matching.",131,null],[18,"NO_MATCH_ERROR","","Means that match functions return the error code `NotFound` if no matches are found. By default no matches is a success.",131,null],[18,"FIND_FAILURES","","Means that the list returned should track which patterns matched which files so that at the end of the match we can identify patterns that did not match any files.",131,null],[18,"FAILURES_ONLY","","Means that the list returned does not need to keep the actual matching filenames. Use this to just test if there were any matches at all or in combination with `PATHSPEC_FAILURES` to validate a pathspec.",131,null],[11,"empty","","Returns an empty set of flags.",131,{"inputs":[],"output":{"name":"pathspecflags"}}],[11,"all","","Returns the set containing all flags.",131,{"inputs":[],"output":{"name":"pathspecflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",131,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",131,{"inputs":[{"name":"u32"}],"output":{"generics":["pathspecflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",131,{"inputs":[{"name":"u32"}],"output":{"name":"pathspecflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"bitor_assign","","Adds the set of flags.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":{"name":"pathspecflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",131,{"inputs":[{"name":"self"},{"name":"pathspecflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",131,{"inputs":[{"name":"self"}],"output":{"name":"pathspecflags"}}],[11,"extend","","",131,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",131,{"inputs":[{"name":"t"}],"output":{"name":"pathspecflags"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"checkoutnotificationtype"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"bool"}}],[11,"cmp","","",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"ordering"}}],[11,"hash","","",132,null],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CONFLICT","","Notification about a conflict.",132,null],[18,"DIRTY","","Notification about a dirty file.",132,null],[18,"UPDATED","","Notification about an updated file.",132,null],[18,"UNTRACKED","","Notification about an untracked file.",132,null],[18,"IGNORED","","Notification about an ignored file.",132,null],[11,"empty","","Returns an empty set of flags.",132,{"inputs":[],"output":{"name":"checkoutnotificationtype"}}],[11,"all","","Returns the set containing all flags.",132,{"inputs":[],"output":{"name":"checkoutnotificationtype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",132,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",132,{"inputs":[{"name":"u32"}],"output":{"generics":["checkoutnotificationtype"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",132,{"inputs":[{"name":"u32"}],"output":{"name":"checkoutnotificationtype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"checkoutnotificationtype"}}],[11,"bitor_assign","","Adds the set of flags.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"checkoutnotificationtype"}}],[11,"bitxor_assign","","Toggles the set of flags.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"checkoutnotificationtype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":{"name":"checkoutnotificationtype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",132,{"inputs":[{"name":"self"},{"name":"checkoutnotificationtype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",132,{"inputs":[{"name":"self"}],"output":{"name":"checkoutnotificationtype"}}],[11,"extend","","",132,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",132,{"inputs":[{"name":"t"}],"output":{"name":"checkoutnotificationtype"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"diffformat"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"diffstatsformat"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"le","","",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"gt","","",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"ge","","",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"ordering"}}],[11,"hash","","",133,null],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NONE","","Don't generate any stats",133,null],[18,"FULL","","Equivalent of `--stat` in git",133,null],[18,"SHORT","","Equivalent of `--shortstat` in git",133,null],[18,"NUMBER","","Equivalent of `--numstat` in git",133,null],[18,"INCLUDE_SUMMARY","","Extended header information such as creations, renames and mode changes, equivalent of `--summary` in git",133,null],[11,"empty","","Returns an empty set of flags.",133,{"inputs":[],"output":{"name":"diffstatsformat"}}],[11,"all","","Returns the set containing all flags.",133,{"inputs":[],"output":{"name":"diffstatsformat"}}],[11,"bits","","Returns the raw value of the flags currently stored.",133,{"inputs":[{"name":"self"}],"output":{"name":"git_diff_stats_format_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",133,{"inputs":[{"name":"git_diff_stats_format_t"}],"output":{"generics":["diffstatsformat"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",133,{"inputs":[{"name":"git_diff_stats_format_t"}],"output":{"name":"diffstatsformat"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"bitor_assign","","Adds the set of flags.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"bitxor_assign","","Toggles the set of flags.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":{"name":"diffstatsformat"}}],[11,"sub_assign","","Disables all flags enabled in the set.",133,{"inputs":[{"name":"self"},{"name":"diffstatsformat"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",133,{"inputs":[{"name":"self"}],"output":{"name":"diffstatsformat"}}],[11,"extend","","",133,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",133,{"inputs":[{"name":"t"}],"output":{"name":"diffstatsformat"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"stashapplyflags"}}],[11,"partial_cmp","","",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"bool"}}],[11,"le","","",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"bool"}}],[11,"gt","","",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"bool"}}],[11,"ge","","",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"bool"}}],[11,"cmp","","",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"ordering"}}],[11,"hash","","",134,null],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",134,null],[18,"REINSTATE_INDEX","","Try to reinstate not only the working tree's changes, but also the index's changes.",134,null],[11,"empty","","Returns an empty set of flags.",134,{"inputs":[],"output":{"name":"stashapplyflags"}}],[11,"all","","Returns the set containing all flags.",134,{"inputs":[],"output":{"name":"stashapplyflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",134,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",134,{"inputs":[{"name":"u32"}],"output":{"generics":["stashapplyflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",134,{"inputs":[{"name":"u32"}],"output":{"name":"stashapplyflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"stashapplyflags"}}],[11,"bitor_assign","","Adds the set of flags.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"stashapplyflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"stashapplyflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":{"name":"stashapplyflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",134,{"inputs":[{"name":"self"},{"name":"stashapplyflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",134,{"inputs":[{"name":"self"}],"output":{"name":"stashapplyflags"}}],[11,"extend","","",134,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",134,{"inputs":[{"name":"t"}],"output":{"name":"stashapplyflags"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"stashflags"}}],[11,"partial_cmp","","",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"bool"}}],[11,"le","","",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"bool"}}],[11,"gt","","",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"bool"}}],[11,"ge","","",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"bool"}}],[11,"cmp","","",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"ordering"}}],[11,"hash","","",135,null],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"DEFAULT","","",135,null],[18,"KEEP_INDEX","","All changes already added to the index are left intact in the working directory",135,null],[18,"INCLUDE_UNTRACKED","","All untracked files are also stashed and then cleaned up from the working directory",135,null],[18,"INCLUDE_IGNORED","","All ignored files are also stashed and then cleaned up from the working directory",135,null],[11,"empty","","Returns an empty set of flags.",135,{"inputs":[],"output":{"name":"stashflags"}}],[11,"all","","Returns the set containing all flags.",135,{"inputs":[],"output":{"name":"stashflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",135,{"inputs":[{"name":"u32"}],"output":{"generics":["stashflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",135,{"inputs":[{"name":"u32"}],"output":{"name":"stashflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",135,{"inputs":[{"name":"self"},{"name":"stashflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"stashflags"}}],[11,"bitor_assign","","Adds the set of flags.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"stashflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"stashflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":{"name":"stashflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",135,{"inputs":[{"name":"self"},{"name":"stashflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",135,{"inputs":[{"name":"self"}],"output":{"name":"stashflags"}}],[11,"extend","","",135,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"stashflags"}}]],"paths":[[3,"CredentialHelper"],[3,"IndexEntry"],[4,"DiffBinaryKind"],[4,"PackBuilderStage"],[4,"StatusShow"],[4,"ErrorCode"],[4,"ErrorClass"],[4,"RepositoryState"],[4,"Direction"],[4,"ResetType"],[4,"ObjectType"],[4,"ReferenceType"],[4,"BranchType"],[4,"ConfigLevel"],[4,"FileFavor"],[4,"Delta"],[4,"SubmoduleIgnore"],[4,"DiffFormat"],[4,"AutotagOption"],[4,"FetchPrune"],[4,"StashApplyProgress"],[4,"CloneLocal"],[3,"RepoBuilder"],[3,"CheckoutBuilder"],[3,"Cert"],[3,"CertHostkey"],[3,"CertX509"],[3,"StringArray"],[3,"Iter"],[3,"IterBytes"],[3,"OidArray"],[4,"Service"],[8,"SmartSubtransport"],[3,"Transport"],[3,"Blame"],[3,"BlameHunk"],[3,"BlameOptions"],[3,"BlameIter"],[3,"Blob"],[3,"BlobWriter"],[3,"Branch"],[3,"Branches"],[3,"Buf"],[3,"Commit"],[3,"Parents"],[3,"Config"],[3,"ConfigEntry"],[3,"ConfigEntries"],[3,"Cred"],[3,"Describe"],[3,"DescribeFormatOptions"],[3,"DescribeOptions"],[3,"Diff"],[3,"DiffDelta"],[3,"DiffFile"],[3,"DiffOptions"],[3,"Deltas"],[3,"DiffLine"],[3,"DiffHunk"],[3,"DiffStats"],[3,"DiffBinary"],[3,"DiffBinaryFile"],[3,"DiffFindOptions"],[3,"Error"],[3,"Index"],[3,"IndexEntries"],[3,"AnnotatedCommit"],[3,"MergeOptions"],[3,"Note"],[3,"Notes"],[3,"Object"],[3,"Odb"],[3,"OdbObject"],[3,"OdbReader"],[3,"OdbWriter"],[3,"Oid"],[3,"PackBuilder"],[3,"Pathspec"],[3,"PathspecMatchList"],[3,"PathspecEntries"],[3,"PathspecDiffEntries"],[3,"PathspecFailedEntries"],[3,"Patch"],[3,"ProxyOptions"],[3,"Reference"],[3,"References"],[3,"ReferenceNames"],[3,"Reflog"],[3,"ReflogEntry"],[3,"ReflogIter"],[3,"Refspec"],[3,"Remote"],[3,"Refspecs"],[3,"RemoteHead"],[3,"FetchOptions"],[3,"PushOptions"],[3,"RemoteConnection"],[3,"RemoteCallbacks"],[3,"Progress"],[3,"Repository"],[3,"RepositoryInitOptions"],[3,"Revspec"],[3,"Revwalk"],[3,"Signature"],[3,"StatusOptions"],[3,"Statuses"],[3,"StatusIter"],[3,"StatusEntry"],[3,"Submodule"],[3,"SubmoduleUpdateOptions"],[3,"StashApplyOptions"],[3,"Tag"],[3,"Time"],[3,"IndexTime"],[3,"Tree"],[3,"TreeEntry"],[3,"TreeIter"],[3,"TreeBuilder"],[8,"IntoCString"],[3,"Sort"],[3,"CredentialType"],[3,"IndexEntryFlag"],[3,"IndexEntryExtendedFlag"],[3,"IndexAddOption"],[3,"RepositoryOpenFlags"],[3,"RevparseMode"],[3,"MergeAnalysis"],[3,"MergePreference"],[3,"Status"],[3,"RepositoryInitMode"],[3,"SubmoduleStatus"],[3,"PathspecFlags"],[3,"CheckoutNotificationType"],[3,"DiffStatsFormat"],[3,"StashApplyFlags"],[3,"StashFlags"]]};
searchIndex["git2_curl"] = {"doc":"A crate for using libcurl as a backend for HTTP git requests with git2-rs.","items":[[5,"register","git2_curl","Register the libcurl backend for HTTP requests made by libgit2.",null,{"inputs":[{"name":"easy"}],"output":null}]],"paths":[]};
searchIndex["libgit2_sys"] = {"doc":"","items":[[3,"git_revspec","libgit2_sys","",null,null],[12,"from","","",0,null],[12,"to","","",0,null],[12,"flags","","",0,null],[3,"git_error","","",null,null],[12,"message","","",1,null],[12,"klass","","",1,null],[3,"git_oid","","",null,null],[12,"id","","",2,null],[3,"git_strarray","","",null,null],[12,"strings","","",3,null],[12,"count","","",3,null],[3,"git_oidarray","","",null,null],[12,"ids","","",4,null],[12,"count","","",4,null],[3,"git_signature","","",null,null],[12,"name","","",5,null],[12,"email","","",5,null],[12,"when","","",5,null],[3,"git_time","","",null,null],[12,"time","","",6,null],[12,"offset","","",6,null],[12,"sign","","",6,null],[3,"git_clone_options","","",null,null],[12,"version","","",7,null],[12,"checkout_opts","","",7,null],[12,"fetch_opts","","",7,null],[12,"bare","","",7,null],[12,"local","","",7,null],[12,"checkout_branch","","",7,null],[12,"repository_cb","","",7,null],[12,"repository_cb_payload","","",7,null],[12,"remote_cb","","",7,null],[12,"remote_cb_payload","","",7,null],[3,"git_checkout_options","","",null,null],[12,"version","","",8,null],[12,"checkout_strategy","","",8,null],[12,"disable_filters","","",8,null],[12,"dir_mode","","",8,null],[12,"file_mode","","",8,null],[12,"file_open_flags","","",8,null],[12,"notify_flags","","",8,null],[12,"notify_cb","","",8,null],[12,"notify_payload","","",8,null],[12,"progress_cb","","",8,null],[12,"progress_payload","","",8,null],[12,"paths","","",8,null],[12,"baseline","","",8,null],[12,"baseline_index","","",8,null],[12,"target_directory","","",8,null],[12,"ancestor_label","","",8,null],[12,"our_label","","",8,null],[12,"their_label","","",8,null],[12,"perfdata_cb","","",8,null],[12,"perfdata_payload","","",8,null],[3,"git_checkout_perfdata","","",null,null],[12,"mkdir_calls","","",9,null],[12,"stat_calls","","",9,null],[12,"chmod_calls","","",9,null],[3,"git_remote_callbacks","","",null,null],[12,"version","","",10,null],[12,"sideband_progress","","",10,null],[12,"completion","","",10,null],[12,"credentials","","",10,null],[12,"certificate_check","","",10,null],[12,"transfer_progress","","",10,null],[12,"update_tips","","",10,null],[12,"pack_progress","","",10,null],[12,"push_transfer_progress","","",10,null],[12,"push_update_reference","","",10,null],[12,"push_negotiation","","",10,null],[12,"transport","","",10,null],[12,"payload","","",10,null],[3,"git_fetch_options","","",null,null],[12,"version","","",11,null],[12,"callbacks","","",11,null],[12,"prune","","",11,null],[12,"update_fetchhead","","",11,null],[12,"download_tags","","",11,null],[12,"proxy_opts","","",11,null],[12,"custom_headers","","",11,null],[3,"git_push_update","","",null,null],[12,"src_refname","","",12,null],[12,"dst_refname","","",12,null],[12,"src","","",12,null],[12,"dst","","",12,null],[3,"git_cert","","",null,null],[12,"cert_type","","",13,null],[3,"git_cert_hostkey","","",null,null],[12,"parent","","",14,null],[12,"kind","","",14,null],[12,"hash_md5","","",14,null],[12,"hash_sha1","","",14,null],[3,"git_cert_x509","","",null,null],[12,"parent","","",15,null],[12,"data","","",15,null],[12,"len","","",15,null],[3,"git_transfer_progress","","",null,null],[12,"total_objects","","",16,null],[12,"indexed_objects","","",16,null],[12,"received_objects","","",16,null],[12,"local_objects","","",16,null],[12,"total_deltas","","",16,null],[12,"indexed_deltas","","",16,null],[12,"received_bytes","","",16,null],[3,"git_diff_file","","",null,null],[12,"id","","",17,null],[12,"path","","",17,null],[12,"size","","",17,null],[12,"flags","","",17,null],[12,"mode","","",17,null],[3,"git_status_options","","",null,null],[12,"version","","",18,null],[12,"show","","",18,null],[12,"flags","","",18,null],[12,"pathspec","","",18,null],[12,"baseline","","",18,null],[3,"git_diff_delta","","",null,null],[12,"status","","",19,null],[12,"flags","","",19,null],[12,"similarity","","",19,null],[12,"nfiles","","",19,null],[12,"old_file","","",19,null],[12,"new_file","","",19,null],[3,"git_status_entry","","",null,null],[12,"status","","",20,null],[12,"head_to_index","","",20,null],[12,"index_to_workdir","","",20,null],[3,"git_buf","","",null,null],[12,"ptr","","",21,null],[12,"asize","","",21,null],[12,"size","","",21,null],[3,"git_blame_options","","",null,null],[12,"version","","",22,null],[12,"flags","","",22,null],[12,"min_match_characters","","",22,null],[12,"newest_commit","","",22,null],[12,"oldest_commit","","",22,null],[12,"min_line","","",22,null],[12,"max_line","","",22,null],[3,"git_blame_hunk","","",null,null],[12,"lines_in_hunk","","",23,null],[12,"final_commit_id","","",23,null],[12,"final_start_line_number","","",23,null],[12,"final_signature","","",23,null],[12,"orig_commit_id","","",23,null],[12,"orig_path","","",23,null],[12,"orig_start_line_number","","",23,null],[12,"orig_signature","","",23,null],[12,"boundary","","",23,null],[3,"git_index_entry","","",null,null],[12,"ctime","","",24,null],[12,"mtime","","",24,null],[12,"dev","","",24,null],[12,"ino","","",24,null],[12,"mode","","",24,null],[12,"uid","","",24,null],[12,"gid","","",24,null],[12,"file_size","","",24,null],[12,"id","","",24,null],[12,"flags","","",24,null],[12,"flags_extended","","",24,null],[12,"path","","",24,null],[3,"git_index_time","","",null,null],[12,"seconds","","",25,null],[12,"nanoseconds","","",25,null],[3,"git_config_entry","","",null,null],[12,"name","","",26,null],[12,"value","","",26,null],[12,"level","","",26,null],[12,"free","","",26,null],[12,"payload","","",26,null],[3,"git_submodule_update_options","","",null,null],[12,"version","","",27,null],[12,"checkout_opts","","",27,null],[12,"fetch_opts","","",27,null],[12,"allow_fetch","","",27,null],[3,"git_writestream","","",null,null],[12,"write","","",28,null],[12,"close","","",28,null],[12,"free","","",28,null],[3,"git_cred","","",null,null],[12,"credtype","","",29,null],[12,"free","","",29,null],[3,"git_push_options","","",null,null],[12,"version","","",30,null],[12,"pb_parallelism","","",30,null],[12,"callbacks","","",30,null],[12,"proxy_opts","","",30,null],[12,"custom_headers","","",30,null],[3,"git_repository_init_options","","",null,null],[12,"version","","",31,null],[12,"flags","","",31,null],[12,"mode","","",31,null],[12,"workdir_path","","",31,null],[12,"description","","",31,null],[12,"template_path","","",31,null],[12,"initial_head","","",31,null],[12,"origin_url","","",31,null],[3,"git_remote_head","","",null,null],[12,"local","","",32,null],[12,"oid","","",32,null],[12,"loid","","",32,null],[12,"name","","",32,null],[12,"symref_target","","",32,null],[3,"git_diff_hunk","","",null,null],[12,"old_start","","",33,null],[12,"old_lines","","",33,null],[12,"new_start","","",33,null],[12,"new_lines","","",33,null],[12,"header_len","","",33,null],[12,"header","","",33,null],[3,"git_diff_line","","",null,null],[12,"origin","","",34,null],[12,"old_lineno","","",34,null],[12,"new_lineno","","",34,null],[12,"num_lines","","",34,null],[12,"content_len","","",34,null],[12,"content_offset","","",34,null],[12,"content","","",34,null],[3,"git_diff_options","","",null,null],[12,"version","","",35,null],[12,"flags","","",35,null],[12,"ignore_submodules","","",35,null],[12,"pathspec","","",35,null],[12,"notify_cb","","",35,null],[12,"progress_cb","","",35,null],[12,"payload","","",35,null],[12,"context_lines","","",35,null],[12,"interhunk_lines","","",35,null],[12,"id_abbrev","","",35,null],[12,"max_size","","",35,null],[12,"old_prefix","","",35,null],[12,"new_prefix","","",35,null],[3,"git_diff_find_options","","",null,null],[12,"version","","",36,null],[12,"flags","","",36,null],[12,"rename_threshold","","",36,null],[12,"rename_from_rewrite_threshold","","",36,null],[12,"copy_threshold","","",36,null],[12,"break_rewrite_threshold","","",36,null],[12,"rename_limit","","",36,null],[12,"metric","","",36,null],[3,"git_diff_similarity_metric","","",null,null],[12,"file_signature","","",37,null],[12,"buffer_signature","","",37,null],[12,"free_signature","","",37,null],[12,"similarity","","",37,null],[12,"payload","","",37,null],[3,"git_diff_binary","","",null,null],[12,"contains_data","","",38,null],[12,"old_file","","",38,null],[12,"new_file","","",38,null],[3,"git_diff_binary_file","","",null,null],[12,"kind","","",39,null],[12,"data","","",39,null],[12,"datalen","","",39,null],[12,"inflatedlen","","",39,null],[3,"git_merge_options","","",null,null],[12,"version","","",40,null],[12,"flags","","",40,null],[12,"rename_threshold","","",40,null],[12,"target_limit","","",40,null],[12,"metric","","",40,null],[12,"recursion_limit","","",40,null],[12,"default_driver","","",40,null],[12,"file_favor","","",40,null],[12,"file_flags","","",40,null],[3,"git_transport","","",null,null],[12,"version","","",41,null],[12,"set_callbacks","","",41,null],[12,"set_custom_headers","","",41,null],[12,"connect","","",41,null],[12,"ls","","",41,null],[12,"push","","",41,null],[12,"negotiate_fetch","","",41,null],[12,"download_pack","","",41,null],[12,"is_connected","","",41,null],[12,"read_flags","","",41,null],[12,"cancel","","",41,null],[12,"close","","",41,null],[12,"free","","",41,null],[3,"git_odb_backend","","",null,null],[12,"version","","",42,null],[12,"odb","","",42,null],[12,"read","","",42,null],[12,"read_prefix","","",42,null],[12,"read_header","","",42,null],[12,"write","","",42,null],[12,"writestream","","",42,null],[12,"readstream","","",42,null],[12,"exists","","",42,null],[12,"exists_prefix","","",42,null],[12,"refresh","","",42,null],[12,"foreach","","",42,null],[12,"writepack","","",42,null],[12,"freshen","","",42,null],[12,"free","","",42,null],[3,"git_refdb_backend","","",null,null],[12,"version","","",43,null],[12,"exists","","",43,null],[12,"lookup","","",43,null],[12,"iterator","","",43,null],[12,"write","","",43,null],[12,"rename","","",43,null],[12,"del","","",43,null],[12,"compress","","",43,null],[12,"has_log","","",43,null],[12,"ensure_log","","",43,null],[12,"free","","",43,null],[12,"reflog_read","","",43,null],[12,"reflog_write","","",43,null],[12,"reflog_rename","","",43,null],[12,"reflog_delete","","",43,null],[12,"lock","","",43,null],[12,"unlock","","",43,null],[3,"git_proxy_options","","",null,null],[12,"version","","",44,null],[12,"kind","","",44,null],[12,"url","","",44,null],[12,"credentials","","",44,null],[12,"certificate_check","","",44,null],[12,"payload","","",44,null],[3,"git_smart_subtransport_stream","","",null,null],[12,"subtransport","","",45,null],[12,"read","","",45,null],[12,"write","","",45,null],[12,"free","","",45,null],[3,"git_smart_subtransport","","",null,null],[12,"action","","",46,null],[12,"close","","",46,null],[12,"free","","",46,null],[3,"git_smart_subtransport_definition","","",null,null],[12,"callback","","",47,null],[12,"rpc","","",47,null],[12,"param","","",47,null],[3,"git_describe_options","","",null,null],[12,"version","","",48,null],[12,"max_candidates_tags","","",48,null],[12,"describe_strategy","","",48,null],[12,"pattern","","",48,null],[12,"only_follow_first_parent","","",48,null],[12,"show_commit_oid_as_fallback","","",48,null],[3,"git_describe_format_options","","",null,null],[12,"version","","",49,null],[12,"abbreviated_size","","",49,null],[12,"always_use_long_format","","",49,null],[12,"dirty_suffix","","",49,null],[3,"git_stash_apply_options","","",null,null],[12,"version","","",50,null],[12,"flags","","",50,null],[12,"checkout_options","","",50,null],[12,"progress_cb","","",50,null],[12,"progress_payload","","",50,null],[4,"git_blob","","",null,null],[4,"git_branch_iterator","","",null,null],[4,"git_blame","","",null,null],[4,"git_commit","","",null,null],[4,"git_config","","",null,null],[4,"git_config_iterator","","",null,null],[4,"git_index","","",null,null],[4,"git_object","","",null,null],[4,"git_reference","","",null,null],[4,"git_reference_iterator","","",null,null],[4,"git_annotated_commit","","",null,null],[4,"git_refdb","","",null,null],[4,"git_refspec","","",null,null],[4,"git_remote","","",null,null],[4,"git_repository","","",null,null],[4,"git_revwalk","","",null,null],[4,"git_submodule","","",null,null],[4,"git_tag","","",null,null],[4,"git_tree","","",null,null],[4,"git_tree_entry","","",null,null],[4,"git_treebuilder","","",null,null],[4,"git_push","","",null,null],[4,"git_note","","",null,null],[4,"git_note_iterator","","",null,null],[4,"git_status_list","","",null,null],[4,"git_pathspec","","",null,null],[4,"git_pathspec_match_list","","",null,null],[4,"git_diff","","",null,null],[4,"git_diff_stats","","",null,null],[4,"git_patch","","",null,null],[4,"git_reflog","","",null,null],[4,"git_reflog_entry","","",null,null],[4,"git_describe_result","","",null,null],[4,"git_packbuilder","","",null,null],[4,"git_odb","","",null,null],[4,"git_odb_stream","","",null,null],[4,"git_odb_object","","",null,null],[4,"git_odb_writepack","","",null,null],[4,"git_worktree","","",null,null],[4,"LIBSSH2_SESSION","","",null,null],[4,"LIBSSH2_USERAUTH_KBDINT_PROMPT","","",null,null],[4,"LIBSSH2_USERAUTH_KBDINT_RESPONSE","","",null,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"git_libgit2_init","","",null,null],[5,"git_libgit2_shutdown","","",null,null],[5,"git_repository_new","","",null,null],[5,"git_repository_free","","",null,null],[5,"git_repository_open","","",null,null],[5,"git_repository_open_bare","","",null,null],[5,"git_repository_open_ext","","",null,null],[5,"git_repository_open_from_worktree","","",null,null],[5,"git_repository_wrap_odb","","",null,null],[5,"git_repository_init","","",null,null],[5,"git_repository_init_ext","","",null,null],[5,"git_repository_init_init_options","","",null,null],[5,"git_repository_get_namespace","","",null,null],[5,"git_repository_set_namespace","","",null,null],[5,"git_repository_head","","",null,null],[5,"git_repository_set_head","","",null,null],[5,"git_repository_head_detached","","",null,null],[5,"git_repository_set_head_detached","","",null,null],[5,"git_repository_set_bare","","",null,null],[5,"git_repository_is_worktree","","",null,null],[5,"git_repository_is_bare","","",null,null],[5,"git_repository_is_empty","","",null,null],[5,"git_repository_is_shallow","","",null,null],[5,"git_repository_path","","",null,null],[5,"git_repository_state","","",null,null],[5,"git_repository_workdir","","",null,null],[5,"git_repository_set_workdir","","",null,null],[5,"git_repository_index","","",null,null],[5,"git_repository_set_index","","",null,null],[5,"git_repository_message","","",null,null],[5,"git_repository_message_remove","","",null,null],[5,"git_repository_config","","",null,null],[5,"git_repository_set_config","","",null,null],[5,"git_repository_config_snapshot","","",null,null],[5,"git_repository_discover","","",null,null],[5,"git_repository_set_odb","","",null,null],[5,"git_repository_refdb","","",null,null],[5,"git_repository_set_refdb","","",null,null],[5,"git_repository_reinit_filesystem","","",null,null],[5,"git_ignore_add_rule","","",null,null],[5,"git_ignore_clear_internal_rules","","",null,null],[5,"git_ignore_path_is_ignored","","",null,null],[5,"git_revparse","","",null,null],[5,"git_revparse_single","","",null,null],[5,"git_revparse_ext","","",null,null],[5,"git_object_dup","","",null,null],[5,"git_object_id","","",null,null],[5,"git_object_free","","",null,null],[5,"git_object_lookup","","",null,null],[5,"git_object_type","","",null,null],[5,"git_object_peel","","",null,null],[5,"git_object_short_id","","",null,null],[5,"git_object_type2string","","",null,null],[5,"git_object_string2type","","",null,null],[5,"git_object_typeisloose","","",null,null],[5,"git_oid_fromraw","","",null,null],[5,"git_oid_fromstrn","","",null,null],[5,"git_oid_tostr","","",null,null],[5,"git_oid_cmp","","",null,null],[5,"git_oid_equal","","",null,null],[5,"git_oid_streq","","",null,null],[5,"git_oid_iszero","","",null,null],[5,"giterr_last","","",null,null],[5,"giterr_clear","","",null,null],[5,"giterr_set_str","","",null,null],[5,"git_remote_create","","",null,null],[5,"git_remote_lookup","","",null,null],[5,"git_remote_create_anonymous","","",null,null],[5,"git_remote_delete","","",null,null],[5,"git_remote_free","","",null,null],[5,"git_remote_name","","",null,null],[5,"git_remote_pushurl","","",null,null],[5,"git_remote_refspec_count","","",null,null],[5,"git_remote_url","","",null,null],[5,"git_remote_connect","","",null,null],[5,"git_remote_connected","","",null,null],[5,"git_remote_disconnect","","",null,null],[5,"git_remote_add_fetch","","",null,null],[5,"git_remote_add_push","","",null,null],[5,"git_remote_download","","",null,null],[5,"git_remote_stop","","",null,null],[5,"git_remote_dup","","",null,null],[5,"git_remote_get_fetch_refspecs","","",null,null],[5,"git_remote_get_push_refspecs","","",null,null],[5,"git_remote_get_refspec","","",null,null],[5,"git_remote_is_valid_name","","",null,null],[5,"git_remote_list","","",null,null],[5,"git_remote_rename","","",null,null],[5,"git_remote_fetch","","",null,null],[5,"git_remote_push","","",null,null],[5,"git_remote_update_tips","","",null,null],[5,"git_remote_set_url","","",null,null],[5,"git_remote_set_pushurl","","",null,null],[5,"git_remote_init_callbacks","","",null,null],[5,"git_fetch_init_options","","",null,null],[5,"git_remote_stats","","",null,null],[5,"git_remote_ls","","",null,null],[5,"git_remote_set_autotag","","",null,null],[5,"git_remote_prune","","",null,null],[5,"git_refspec_direction","","",null,null],[5,"git_refspec_dst","","",null,null],[5,"git_refspec_dst_matches","","",null,null],[5,"git_refspec_src","","",null,null],[5,"git_refspec_src_matches","","",null,null],[5,"git_refspec_force","","",null,null],[5,"git_refspec_string","","",null,null],[5,"git_strarray_free","","",null,null],[5,"git_oidarray_free","","",null,null],[5,"git_signature_default","","",null,null],[5,"git_signature_free","","",null,null],[5,"git_signature_new","","",null,null],[5,"git_signature_now","","",null,null],[5,"git_signature_dup","","",null,null],[5,"git_status_list_new","","",null,null],[5,"git_status_list_entrycount","","",null,null],[5,"git_status_byindex","","",null,null],[5,"git_status_list_free","","",null,null],[5,"git_status_init_options","","",null,null],[5,"git_status_file","","",null,null],[5,"git_status_should_ignore","","",null,null],[5,"git_clone","","",null,null],[5,"git_clone_init_options","","",null,null],[5,"git_reset","","",null,null],[5,"git_reset_default","","",null,null],[5,"git_reference_cmp","","",null,null],[5,"git_reference_delete","","",null,null],[5,"git_reference_free","","",null,null],[5,"git_reference_is_branch","","",null,null],[5,"git_reference_is_note","","",null,null],[5,"git_reference_is_remote","","",null,null],[5,"git_reference_is_tag","","",null,null],[5,"git_reference_is_valid_name","","",null,null],[5,"git_reference_lookup","","",null,null],[5,"git_reference_name","","",null,null],[5,"git_reference_name_to_id","","",null,null],[5,"git_reference_peel","","",null,null],[5,"git_reference_rename","","",null,null],[5,"git_reference_resolve","","",null,null],[5,"git_reference_shorthand","","",null,null],[5,"git_reference_symbolic_target","","",null,null],[5,"git_reference_target","","",null,null],[5,"git_reference_target_peel","","",null,null],[5,"git_reference_set_target","","",null,null],[5,"git_reference_type","","",null,null],[5,"git_reference_iterator_new","","",null,null],[5,"git_reference_iterator_glob_new","","",null,null],[5,"git_reference_iterator_free","","",null,null],[5,"git_reference_next","","",null,null],[5,"git_reference_next_name","","",null,null],[5,"git_reference_create","","",null,null],[5,"git_reference_symbolic_create","","",null,null],[5,"git_reference_create_matching","","",null,null],[5,"git_reference_symbolic_create_matching","","",null,null],[5,"git_reference_has_log","","",null,null],[5,"git_reference_ensure_log","","",null,null],[5,"git_stash_save","","",null,null],[5,"git_stash_apply_init_options","","",null,null],[5,"git_stash_apply","","",null,null],[5,"git_stash_foreach","","",null,null],[5,"git_stash_drop","","",null,null],[5,"git_stash_pop","","",null,null],[5,"git_submodule_add_finalize","","",null,null],[5,"git_submodule_add_setup","","",null,null],[5,"git_submodule_add_to_index","","",null,null],[5,"git_submodule_branch","","",null,null],[5,"git_submodule_foreach","","",null,null],[5,"git_submodule_free","","",null,null],[5,"git_submodule_head_id","","",null,null],[5,"git_submodule_index_id","","",null,null],[5,"git_submodule_init","","",null,null],[5,"git_submodule_location","","",null,null],[5,"git_submodule_lookup","","",null,null],[5,"git_submodule_name","","",null,null],[5,"git_submodule_open","","",null,null],[5,"git_submodule_path","","",null,null],[5,"git_submodule_reload","","",null,null],[5,"git_submodule_set_ignore","","",null,null],[5,"git_submodule_set_update","","",null,null],[5,"git_submodule_set_url","","",null,null],[5,"git_submodule_sync","","",null,null],[5,"git_submodule_update_strategy","","",null,null],[5,"git_submodule_update","","",null,null],[5,"git_submodule_update_init_options","","",null,null],[5,"git_submodule_url","","",null,null],[5,"git_submodule_wd_id","","",null,null],[5,"git_submodule_status","","",null,null],[5,"git_submodule_set_branch","","",null,null],[5,"git_blob_free","","",null,null],[5,"git_blob_id","","",null,null],[5,"git_blob_is_binary","","",null,null],[5,"git_blob_lookup","","",null,null],[5,"git_blob_lookup_prefix","","",null,null],[5,"git_blob_rawcontent","","",null,null],[5,"git_blob_rawsize","","",null,null],[5,"git_blob_create_frombuffer","","",null,null],[5,"git_blob_create_fromdisk","","",null,null],[5,"git_blob_create_fromworkdir","","",null,null],[5,"git_blob_create_fromstream","","",null,null],[5,"git_blob_create_fromstream_commit","","",null,null],[5,"git_tree_entry_byid","","",null,null],[5,"git_tree_entry_byindex","","",null,null],[5,"git_tree_entry_byname","","",null,null],[5,"git_tree_entry_bypath","","",null,null],[5,"git_tree_entry_cmp","","",null,null],[5,"git_tree_entry_dup","","",null,null],[5,"git_tree_entry_filemode","","",null,null],[5,"git_tree_entry_filemode_raw","","",null,null],[5,"git_tree_entry_free","","",null,null],[5,"git_tree_entry_id","","",null,null],[5,"git_tree_entry_name","","",null,null],[5,"git_tree_entry_to_object","","",null,null],[5,"git_tree_entry_type","","",null,null],[5,"git_tree_entrycount","","",null,null],[5,"git_tree_free","","",null,null],[5,"git_tree_id","","",null,null],[5,"git_tree_lookup","","",null,null],[5,"git_tree_walk","","",null,null],[5,"git_treebuilder_new","","",null,null],[5,"git_treebuilder_clear","","",null,null],[5,"git_treebuilder_entrycount","","",null,null],[5,"git_treebuilder_free","","",null,null],[5,"git_treebuilder_get","","",null,null],[5,"git_treebuilder_insert","","",null,null],[5,"git_treebuilder_remove","","",null,null],[5,"git_treebuilder_filter","","",null,null],[5,"git_treebuilder_write","","",null,null],[5,"git_buf_free","","",null,null],[5,"git_buf_grow","","",null,null],[5,"git_buf_set","","",null,null],[5,"git_commit_author","","",null,null],[5,"git_commit_committer","","",null,null],[5,"git_commit_free","","",null,null],[5,"git_commit_id","","",null,null],[5,"git_commit_lookup","","",null,null],[5,"git_commit_message","","",null,null],[5,"git_commit_message_encoding","","",null,null],[5,"git_commit_message_raw","","",null,null],[5,"git_commit_nth_gen_ancestor","","",null,null],[5,"git_commit_parent","","",null,null],[5,"git_commit_parent_id","","",null,null],[5,"git_commit_parentcount","","",null,null],[5,"git_commit_raw_header","","",null,null],[5,"git_commit_summary","","",null,null],[5,"git_commit_time","","",null,null],[5,"git_commit_time_offset","","",null,null],[5,"git_commit_tree","","",null,null],[5,"git_commit_tree_id","","",null,null],[5,"git_commit_amend","","",null,null],[5,"git_commit_create","","",null,null],[5,"git_commit_header_field","","",null,null],[5,"git_annotated_commit_lookup","","",null,null],[5,"git_commit_create_with_signature","","",null,null],[5,"git_commit_extract_signature","","",null,null],[5,"git_branch_create","","",null,null],[5,"git_branch_delete","","",null,null],[5,"git_branch_is_head","","",null,null],[5,"git_branch_iterator_free","","",null,null],[5,"git_branch_iterator_new","","",null,null],[5,"git_branch_lookup","","",null,null],[5,"git_branch_move","","",null,null],[5,"git_branch_name","","",null,null],[5,"git_branch_next","","",null,null],[5,"git_branch_set_upstream","","",null,null],[5,"git_branch_upstream","","",null,null],[5,"git_index_add","","",null,null],[5,"git_index_add_all","","",null,null],[5,"git_index_add_bypath","","",null,null],[5,"git_index_add_frombuffer","","",null,null],[5,"git_index_conflict_add","","",null,null],[5,"git_index_clear","","",null,null],[5,"git_index_entry_stage","","",null,null],[5,"git_index_entrycount","","",null,null],[5,"git_index_find","","",null,null],[5,"git_index_free","","",null,null],[5,"git_index_get_byindex","","",null,null],[5,"git_index_get_bypath","","",null,null],[5,"git_index_has_conflicts","","",null,null],[5,"git_index_new","","",null,null],[5,"git_index_open","","",null,null],[5,"git_index_path","","",null,null],[5,"git_index_read","","",null,null],[5,"git_index_read_tree","","",null,null],[5,"git_index_remove","","",null,null],[5,"git_index_remove_all","","",null,null],[5,"git_index_remove_bypath","","",null,null],[5,"git_index_remove_directory","","",null,null],[5,"git_index_update_all","","",null,null],[5,"git_index_write","","",null,null],[5,"git_index_write_tree","","",null,null],[5,"git_index_write_tree_to","","",null,null],[5,"git_config_add_file_ondisk","","",null,null],[5,"git_config_delete_entry","","",null,null],[5,"git_config_delete_multivar","","",null,null],[5,"git_config_find_programdata","","",null,null],[5,"git_config_find_global","","",null,null],[5,"git_config_find_system","","",null,null],[5,"git_config_find_xdg","","",null,null],[5,"git_config_free","","",null,null],[5,"git_config_get_bool","","",null,null],[5,"git_config_get_entry","","",null,null],[5,"git_config_get_int32","","",null,null],[5,"git_config_get_int64","","",null,null],[5,"git_config_get_string","","",null,null],[5,"git_config_get_string_buf","","",null,null],[5,"git_config_get_path","","",null,null],[5,"git_config_iterator_free","","",null,null],[5,"git_config_iterator_glob_new","","",null,null],[5,"git_config_iterator_new","","",null,null],[5,"git_config_new","","",null,null],[5,"git_config_next","","",null,null],[5,"git_config_open_default","","",null,null],[5,"git_config_open_global","","",null,null],[5,"git_config_open_level","","",null,null],[5,"git_config_open_ondisk","","",null,null],[5,"git_config_parse_bool","","",null,null],[5,"git_config_parse_int32","","",null,null],[5,"git_config_parse_int64","","",null,null],[5,"git_config_set_bool","","",null,null],[5,"git_config_set_int32","","",null,null],[5,"git_config_set_int64","","",null,null],[5,"git_config_set_multivar","","",null,null],[5,"git_config_set_string","","",null,null],[5,"git_config_snapshot","","",null,null],[5,"git_config_entry_free","","",null,null],[5,"git_cred_default_new","","",null,null],[5,"git_cred_has_username","","",null,null],[5,"git_cred_ssh_custom_new","","",null,null],[5,"git_cred_ssh_interactive_new","","",null,null],[5,"git_cred_ssh_key_from_agent","","",null,null],[5,"git_cred_ssh_key_new","","",null,null],[5,"git_cred_ssh_key_memory_new","","",null,null],[5,"git_cred_userpass","","",null,null],[5,"git_cred_userpass_plaintext_new","","",null,null],[5,"git_cred_username_new","","",null,null],[5,"git_tag_annotation_create","","",null,null],[5,"git_tag_create","","",null,null],[5,"git_tag_create_frombuffer","","",null,null],[5,"git_tag_create_lightweight","","",null,null],[5,"git_tag_delete","","",null,null],[5,"git_tag_foreach","","",null,null],[5,"git_tag_free","","",null,null],[5,"git_tag_id","","",null,null],[5,"git_tag_list","","",null,null],[5,"git_tag_list_match","","",null,null],[5,"git_tag_lookup","","",null,null],[5,"git_tag_lookup_prefix","","",null,null],[5,"git_tag_message","","",null,null],[5,"git_tag_name","","",null,null],[5,"git_tag_peel","","",null,null],[5,"git_tag_tagger","","",null,null],[5,"git_tag_target","","",null,null],[5,"git_tag_target_id","","",null,null],[5,"git_tag_target_type","","",null,null],[5,"git_checkout_head","","",null,null],[5,"git_checkout_index","","",null,null],[5,"git_checkout_tree","","",null,null],[5,"git_checkout_init_options","","",null,null],[5,"git_annotated_commit_id","","",null,null],[5,"git_annotated_commit_from_ref","","",null,null],[5,"git_annotated_commit_free","","",null,null],[5,"git_merge_init_options","","",null,null],[5,"git_merge","","",null,null],[5,"git_merge_commits","","",null,null],[5,"git_merge_trees","","",null,null],[5,"git_repository_state_cleanup","","",null,null],[5,"git_merge_analysis","","",null,null],[5,"git_note_author","","",null,null],[5,"git_note_committer","","",null,null],[5,"git_note_create","","",null,null],[5,"git_note_default_ref","","",null,null],[5,"git_note_free","","",null,null],[5,"git_note_id","","",null,null],[5,"git_note_iterator_free","","",null,null],[5,"git_note_iterator_new","","",null,null],[5,"git_note_message","","",null,null],[5,"git_note_next","","",null,null],[5,"git_note_read","","",null,null],[5,"git_note_remove","","",null,null],[5,"git_blame_file","","",null,null],[5,"git_blame_free","","",null,null],[5,"git_blame_init_options","","",null,null],[5,"git_blame_get_hunk_count","","",null,null],[5,"git_blame_get_hunk_byline","","",null,null],[5,"git_blame_get_hunk_byindex","","",null,null],[5,"git_revwalk_new","","",null,null],[5,"git_revwalk_free","","",null,null],[5,"git_revwalk_reset","","",null,null],[5,"git_revwalk_sorting","","",null,null],[5,"git_revwalk_push_head","","",null,null],[5,"git_revwalk_push","","",null,null],[5,"git_revwalk_push_ref","","",null,null],[5,"git_revwalk_push_glob","","",null,null],[5,"git_revwalk_push_range","","",null,null],[5,"git_revwalk_simplify_first_parent","","",null,null],[5,"git_revwalk_hide_head","","",null,null],[5,"git_revwalk_hide","","",null,null],[5,"git_revwalk_hide_ref","","",null,null],[5,"git_revwalk_hide_glob","","",null,null],[5,"git_revwalk_add_hide_cb","","",null,null],[5,"git_revwalk_next","","",null,null],[5,"git_merge_base","","",null,null],[5,"git_merge_bases","","",null,null],[5,"git_pathspec_free","","",null,null],[5,"git_pathspec_match_diff","","",null,null],[5,"git_pathspec_match_index","","",null,null],[5,"git_pathspec_match_list_diff_entry","","",null,null],[5,"git_pathspec_match_list_entry","","",null,null],[5,"git_pathspec_match_list_entrycount","","",null,null],[5,"git_pathspec_match_list_failed_entry","","",null,null],[5,"git_pathspec_match_list_failed_entrycount","","",null,null],[5,"git_pathspec_match_list_free","","",null,null],[5,"git_pathspec_match_tree","","",null,null],[5,"git_pathspec_match_workdir","","",null,null],[5,"git_pathspec_matches_path","","",null,null],[5,"git_pathspec_new","","",null,null],[5,"git_diff_blob_to_buffer","","",null,null],[5,"git_diff_blobs","","",null,null],[5,"git_diff_buffers","","",null,null],[5,"git_diff_find_similar","","",null,null],[5,"git_diff_find_init_options","","",null,null],[5,"git_diff_foreach","","",null,null],[5,"git_diff_free","","",null,null],[5,"git_diff_get_delta","","",null,null],[5,"git_diff_get_stats","","",null,null],[5,"git_diff_index_to_index","","",null,null],[5,"git_diff_index_to_workdir","","",null,null],[5,"git_diff_init_options","","",null,null],[5,"git_diff_is_sorted_icase","","",null,null],[5,"git_diff_merge","","",null,null],[5,"git_diff_num_deltas","","",null,null],[5,"git_diff_num_deltas_of_type","","",null,null],[5,"git_diff_print","","",null,null],[5,"git_diff_stats_deletions","","",null,null],[5,"git_diff_stats_files_changed","","",null,null],[5,"git_diff_stats_free","","",null,null],[5,"git_diff_stats_insertions","","",null,null],[5,"git_diff_stats_to_buf","","",null,null],[5,"git_diff_status_char","","",null,null],[5,"git_diff_tree_to_index","","",null,null],[5,"git_diff_tree_to_tree","","",null,null],[5,"git_diff_tree_to_workdir","","",null,null],[5,"git_diff_tree_to_workdir_with_index","","",null,null],[5,"git_graph_ahead_behind","","",null,null],[5,"git_graph_descendant_of","","",null,null],[5,"git_patch_from_diff","","",null,null],[5,"git_patch_from_blobs","","",null,null],[5,"git_patch_from_blob_and_buffer","","",null,null],[5,"git_patch_from_buffers","","",null,null],[5,"git_patch_free","","",null,null],[5,"git_patch_get_delta","","",null,null],[5,"git_patch_num_hunks","","",null,null],[5,"git_patch_line_stats","","",null,null],[5,"git_patch_get_hunk","","",null,null],[5,"git_patch_num_lines_in_hunk","","",null,null],[5,"git_patch_get_line_in_hunk","","",null,null],[5,"git_patch_size","","",null,null],[5,"git_patch_print","","",null,null],[5,"git_patch_to_buf","","",null,null],[5,"git_reflog_append","","",null,null],[5,"git_reflog_delete","","",null,null],[5,"git_reflog_drop","","",null,null],[5,"git_reflog_entry_byindex","","",null,null],[5,"git_reflog_entry_committer","","",null,null],[5,"git_reflog_entry_id_new","","",null,null],[5,"git_reflog_entry_id_old","","",null,null],[5,"git_reflog_entry_message","","",null,null],[5,"git_reflog_entrycount","","",null,null],[5,"git_reflog_free","","",null,null],[5,"git_reflog_read","","",null,null],[5,"git_reflog_rename","","",null,null],[5,"git_reflog_write","","",null,null],[5,"git_transport_register","","",null,null],[5,"git_transport_unregister","","",null,null],[5,"git_transport_smart","","",null,null],[5,"git_describe_commit","","",null,null],[5,"git_describe_format","","",null,null],[5,"git_describe_result_free","","",null,null],[5,"git_describe_workdir","","",null,null],[5,"git_message_prettify","","",null,null],[5,"git_packbuilder_new","","",null,null],[5,"git_packbuilder_set_threads","","",null,null],[5,"git_packbuilder_insert","","",null,null],[5,"git_packbuilder_insert_tree","","",null,null],[5,"git_packbuilder_insert_commit","","",null,null],[5,"git_packbuilder_insert_walk","","",null,null],[5,"git_packbuilder_insert_recur","","",null,null],[5,"git_packbuilder_write_buf","","",null,null],[5,"git_packbuilder_write","","",null,null],[5,"git_packbuilder_hash","","",null,null],[5,"git_packbuilder_foreach","","",null,null],[5,"git_packbuilder_object_count","","",null,null],[5,"git_packbuilder_written","","",null,null],[5,"git_packbuilder_set_callbacks","","",null,null],[5,"git_packbuilder_free","","",null,null],[5,"git_repository_odb","","",null,null],[5,"git_odb_new","","",null,null],[5,"git_odb_free","","",null,null],[5,"git_odb_open_rstream","","",null,null],[5,"git_odb_stream_read","","",null,null],[5,"git_odb_open_wstream","","",null,null],[5,"git_odb_stream_write","","",null,null],[5,"git_odb_stream_finalize_write","","",null,null],[5,"git_odb_stream_free","","",null,null],[5,"git_odb_foreach","","",null,null],[5,"git_odb_read","","",null,null],[5,"git_odb_read_header","","",null,null],[5,"git_odb_write","","",null,null],[5,"git_odb_hash","","",null,null],[5,"git_odb_hashfile","","",null,null],[5,"git_odb_exists_prefix","","",null,null],[5,"git_odb_exists","","",null,null],[5,"git_odb_refresh","","",null,null],[5,"git_odb_object_id","","",null,null],[5,"git_odb_object_size","","",null,null],[5,"git_odb_object_type","","",null,null],[5,"git_odb_object_data","","",null,null],[5,"git_odb_object_dup","","",null,null],[5,"git_odb_object_free","","",null,null],[5,"git_odb_init_backend","","",null,null],[5,"git_odb_add_backend","","",null,null],[5,"git_odb_backend_pack","","",null,null],[5,"git_odb_backend_one_pack","","",null,null],[5,"git_odb_add_disk_alternate","","",null,null],[5,"git_odb_backend_loose","","",null,null],[5,"git_odb_add_alternate","","",null,null],[5,"git_odb_backend_malloc","","",null,null],[5,"git_odb_num_backends","","",null,null],[5,"git_odb_get_backend","","",null,null],[5,"git_mempack_new","","",null,null],[5,"git_mempack_reset","","",null,null],[5,"git_mempack_dump","","",null,null],[5,"git_refdb_new","","",null,null],[5,"git_refdb_open","","",null,null],[5,"git_refdb_backend_fs","","",null,null],[5,"git_refdb_init_backend","","",null,null],[5,"git_refdb_set_backend","","",null,null],[5,"git_refdb_compress","","",null,null],[5,"git_refdb_free","","",null,null],[6,"git_off_t","","",null,null],[6,"git_time_t","","",null,null],[6,"git_revparse_mode_t","","",null,null],[6,"git_error_code","","",null,null],[6,"git_error_t","","",null,null],[6,"git_repository_state_t","","",null,null],[6,"git_direction","","",null,null],[6,"git_clone_local_t","","",null,null],[6,"git_checkout_notify_cb","","",null,null],[6,"git_checkout_progress_cb","","",null,null],[6,"git_checkout_perfdata_cb","","",null,null],[6,"git_remote_autotag_option_t","","",null,null],[6,"git_fetch_prune_t","","",null,null],[6,"git_remote_completion_type","","",null,null],[6,"git_transport_message_cb","","",null,null],[6,"git_cred_acquire_cb","","",null,null],[6,"git_transfer_progress_cb","","",null,null],[6,"git_packbuilder_progress","","",null,null],[6,"git_push_transfer_progress","","",null,null],[6,"git_transport_certificate_check_cb","","",null,null],[6,"git_push_negotiation","","",null,null],[6,"git_push_update_reference_cb","","",null,null],[6,"git_cert_t","","",null,null],[6,"git_cert_ssh_t","","",null,null],[6,"git_repository_create_cb","","",null,null],[6,"git_remote_create_cb","","",null,null],[6,"git_checkout_notify_t","","",null,null],[6,"git_status_t","","",null,null],[6,"git_status_opt_t","","",null,null],[6,"git_status_show_t","","",null,null],[6,"git_delta_t","","",null,null],[6,"git_checkout_strategy_t","","",null,null],[6,"git_reset_t","","",null,null],[6,"git_otype","","",null,null],[6,"git_ref_t","","",null,null],[6,"git_filemode_t","","",null,null],[6,"git_treewalk_mode","","",null,null],[6,"git_treewalk_cb","","",null,null],[6,"git_treebuilder_filter_cb","","",null,null],[6,"git_revwalk_hide_cb","","",null,null],[6,"git_branch_t","","",null,null],[6,"git_index_matched_path_cb","","",null,null],[6,"git_idxentry_extended_flag_t","","",null,null],[6,"git_indxentry_flag_t","","",null,null],[6,"git_config_level_t","","",null,null],[6,"git_submodule_update_t","","",null,null],[6,"git_submodule_ignore_t","","",null,null],[6,"git_submodule_cb","","",null,null],[6,"git_credtype_t","","",null,null],[6,"git_cred_ssh_interactive_callback","","",null,null],[6,"git_cred_sign_callback","","",null,null],[6,"git_tag_foreach_cb","","",null,null],[6,"git_index_add_option_t","","",null,null],[6,"git_repository_open_flag_t","","",null,null],[6,"git_repository_init_flag_t","","",null,null],[6,"git_repository_init_mode_t","","",null,null],[6,"git_sort_t","","",null,null],[6,"git_submodule_status_t","","",null,null],[6,"git_pathspec_flag_t","","",null,null],[6,"git_diff_file_cb","","",null,null],[6,"git_diff_hunk_cb","","",null,null],[6,"git_diff_line_cb","","",null,null],[6,"git_diff_binary_cb","","",null,null],[6,"git_diff_line_t","","",null,null],[6,"git_diff_format_t","","",null,null],[6,"git_diff_stats_format_t","","",null,null],[6,"git_diff_notify_cb","","",null,null],[6,"git_diff_progress_cb","","",null,null],[6,"git_diff_option_t","","",null,null],[6,"git_diff_binary_t","","",null,null],[6,"git_merge_flag_t","","",null,null],[6,"git_merge_file_favor_t","","",null,null],[6,"git_merge_file_flag_t","","",null,null],[6,"git_merge_analysis_t","","",null,null],[6,"git_merge_preference_t","","",null,null],[6,"git_transport_cb","","",null,null],[6,"git_proxy_t","","",null,null],[6,"git_smart_service_t","","",null,null],[6,"git_smart_subtransport_cb","","",null,null],[6,"git_describe_strategy_t","","",null,null],[6,"git_packbuilder_stage_t","","",null,null],[6,"git_stash_flags","","",null,null],[6,"git_stash_apply_flags","","",null,null],[6,"git_stash_apply_progress_t","","",null,null],[6,"git_stash_apply_progress_cb","","",null,null],[6,"git_stash_cb","","",null,null],[6,"git_packbuilder_foreach_cb","","",null,null],[6,"git_odb_foreach_cb","","",null,null],[17,"GIT_OID_RAWSZ","","",null,null],[17,"GIT_OID_HEXSZ","","",null,null],[17,"GIT_CLONE_OPTIONS_VERSION","","",null,null],[17,"GIT_STASH_APPLY_OPTIONS_VERSION","","",null,null],[17,"GIT_CHECKOUT_OPTIONS_VERSION","","",null,null],[17,"GIT_MERGE_OPTIONS_VERSION","","",null,null],[17,"GIT_REMOTE_CALLBACKS_VERSION","","",null,null],[17,"GIT_STATUS_OPTIONS_VERSION","","",null,null],[17,"GIT_BLAME_OPTIONS_VERSION","","",null,null],[17,"GIT_PROXY_OPTIONS_VERSION","","",null,null],[17,"GIT_SUBMODULE_UPDATE_OPTIONS_VERSION","","",null,null],[17,"GIT_ODB_BACKEND_VERSION","","",null,null],[17,"GIT_REFDB_BACKEND_VERSION","","",null,null],[17,"GIT_REVPARSE_SINGLE","","",null,null],[17,"GIT_REVPARSE_RANGE","","",null,null],[17,"GIT_REVPARSE_MERGE_BASE","","",null,null],[17,"GIT_OK","","",null,null],[17,"GIT_ERROR","","",null,null],[17,"GIT_ENOTFOUND","","",null,null],[17,"GIT_EEXISTS","","",null,null],[17,"GIT_EAMBIGUOUS","","",null,null],[17,"GIT_EBUFS","","",null,null],[17,"GIT_EUSER","","",null,null],[17,"GIT_EBAREREPO","","",null,null],[17,"GIT_EUNBORNBRANCH","","",null,null],[17,"GIT_EUNMERGED","","",null,null],[17,"GIT_ENONFASTFORWARD","","",null,null],[17,"GIT_EINVALIDSPEC","","",null,null],[17,"GIT_ECONFLICT","","",null,null],[17,"GIT_ELOCKED","","",null,null],[17,"GIT_EMODIFIED","","",null,null],[17,"GIT_EAUTH","","",null,null],[17,"GIT_ECERTIFICATE","","",null,null],[17,"GIT_EAPPLIED","","",null,null],[17,"GIT_EPEEL","","",null,null],[17,"GIT_EEOF","","",null,null],[17,"GIT_EINVALID","","",null,null],[17,"GIT_EUNCOMMITTED","","",null,null],[17,"GIT_EDIRECTORY","","",null,null],[17,"GIT_EMERGECONFLICT","","",null,null],[17,"GIT_PASSTHROUGH","","",null,null],[17,"GIT_ITEROVER","","",null,null],[17,"GITERR_NONE","","",null,null],[17,"GITERR_NOMEMORY","","",null,null],[17,"GITERR_OS","","",null,null],[17,"GITERR_INVALID","","",null,null],[17,"GITERR_REFERENCE","","",null,null],[17,"GITERR_ZLIB","","",null,null],[17,"GITERR_REPOSITORY","","",null,null],[17,"GITERR_CONFIG","","",null,null],[17,"GITERR_REGEX","","",null,null],[17,"GITERR_ODB","","",null,null],[17,"GITERR_INDEX","","",null,null],[17,"GITERR_OBJECT","","",null,null],[17,"GITERR_NET","","",null,null],[17,"GITERR_TAG","","",null,null],[17,"GITERR_TREE","","",null,null],[17,"GITERR_INDEXER","","",null,null],[17,"GITERR_SSL","","",null,null],[17,"GITERR_SUBMODULE","","",null,null],[17,"GITERR_THREAD","","",null,null],[17,"GITERR_STASH","","",null,null],[17,"GITERR_CHECKOUT","","",null,null],[17,"GITERR_FETCHHEAD","","",null,null],[17,"GITERR_MERGE","","",null,null],[17,"GITERR_SSH","","",null,null],[17,"GITERR_FILTER","","",null,null],[17,"GITERR_REVERT","","",null,null],[17,"GITERR_CALLBACK","","",null,null],[17,"GITERR_CHERRYPICK","","",null,null],[17,"GITERR_DESCRIBE","","",null,null],[17,"GITERR_REBASE","","",null,null],[17,"GITERR_FILESYSTEM","","",null,null],[17,"GIT_REPOSITORY_STATE_NONE","","",null,null],[17,"GIT_REPOSITORY_STATE_MERGE","","",null,null],[17,"GIT_REPOSITORY_STATE_REVERT","","",null,null],[17,"GIT_REPOSITORY_STATE_REVERT_SEQUENCE","","",null,null],[17,"GIT_REPOSITORY_STATE_CHERRYPICK","","",null,null],[17,"GIT_REPOSITORY_STATE_CHERRYPICK_SEQUENCE","","",null,null],[17,"GIT_REPOSITORY_STATE_BISECT","","",null,null],[17,"GIT_REPOSITORY_STATE_REBASE","","",null,null],[17,"GIT_REPOSITORY_STATE_REBASE_INTERACTIVE","","",null,null],[17,"GIT_REPOSITORY_STATE_REBASE_MERGE","","",null,null],[17,"GIT_REPOSITORY_STATE_APPLY_MAILBOX","","",null,null],[17,"GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE","","",null,null],[17,"GIT_DIRECTION_FETCH","","",null,null],[17,"GIT_DIRECTION_PUSH","","",null,null],[17,"GIT_CLONE_LOCAL_AUTO","","",null,null],[17,"GIT_CLONE_LOCAL","","",null,null],[17,"GIT_CLONE_NO_LOCAL","","",null,null],[17,"GIT_CLONE_LOCAL_NO_LINKS","","",null,null],[17,"GIT_REMOTE_DOWNLOAD_TAGS_UNSPECIFIED","","",null,null],[17,"GIT_REMOTE_DOWNLOAD_TAGS_AUTO","","",null,null],[17,"GIT_REMOTE_DOWNLOAD_TAGS_NONE","","",null,null],[17,"GIT_REMOTE_DOWNLOAD_TAGS_ALL","","",null,null],[17,"GIT_FETCH_PRUNE_UNSPECIFIED","","",null,null],[17,"GIT_FETCH_PRUNE","","",null,null],[17,"GIT_FETCH_NO_PRUNE","","",null,null],[17,"GIT_REMOTE_COMPLETION_DOWNLOAD","","",null,null],[17,"GIT_REMOTE_COMPLETION_INDEXING","","",null,null],[17,"GIT_REMOTE_COMPLETION_ERROR","","",null,null],[17,"GIT_CERT_NONE","","",null,null],[17,"GIT_CERT_X509","","",null,null],[17,"GIT_CERT_HOSTKEY_LIBSSH2","","",null,null],[17,"GIT_CERT_SSH_MD5","","",null,null],[17,"GIT_CERT_SSH_SHA1","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_NONE","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_CONFLICT","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_DIRTY","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_UPDATED","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_UNTRACKED","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_IGNORED","","",null,null],[17,"GIT_CHECKOUT_NOTIFY_ALL","","",null,null],[17,"GIT_STATUS_CURRENT","","",null,null],[17,"GIT_STATUS_INDEX_NEW","","",null,null],[17,"GIT_STATUS_INDEX_MODIFIED","","",null,null],[17,"GIT_STATUS_INDEX_DELETED","","",null,null],[17,"GIT_STATUS_INDEX_RENAMED","","",null,null],[17,"GIT_STATUS_INDEX_TYPECHANGE","","",null,null],[17,"GIT_STATUS_WT_NEW","","",null,null],[17,"GIT_STATUS_WT_MODIFIED","","",null,null],[17,"GIT_STATUS_WT_DELETED","","",null,null],[17,"GIT_STATUS_WT_TYPECHANGE","","",null,null],[17,"GIT_STATUS_WT_RENAMED","","",null,null],[17,"GIT_STATUS_WT_UNREADABLE","","",null,null],[17,"GIT_STATUS_IGNORED","","",null,null],[17,"GIT_STATUS_CONFLICTED","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_UNTRACKED","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_IGNORED","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_UNMODIFIED","","",null,null],[17,"GIT_STATUS_OPT_EXCLUDE_SUBMODULES","","",null,null],[17,"GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS","","",null,null],[17,"GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"GIT_STATUS_OPT_RECURSE_IGNORED_DIRS","","",null,null],[17,"GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX","","",null,null],[17,"GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR","","",null,null],[17,"GIT_STATUS_OPT_SORT_CASE_SENSITIVELY","","",null,null],[17,"GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY","","",null,null],[17,"GIT_STATUS_OPT_RENAMES_FROM_REWRITES","","",null,null],[17,"GIT_STATUS_OPT_NO_REFRESH","","",null,null],[17,"GIT_STATUS_OPT_UPDATE_INDEX","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_UNREADABLE","","",null,null],[17,"GIT_STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED","","",null,null],[17,"GIT_STATUS_SHOW_INDEX_AND_WORKDIR","","",null,null],[17,"GIT_STATUS_SHOW_INDEX_ONLY","","",null,null],[17,"GIT_STATUS_SHOW_WORKDIR_ONLY","","",null,null],[17,"GIT_DELTA_UNMODIFIED","","",null,null],[17,"GIT_DELTA_ADDED","","",null,null],[17,"GIT_DELTA_DELETED","","",null,null],[17,"GIT_DELTA_MODIFIED","","",null,null],[17,"GIT_DELTA_RENAMED","","",null,null],[17,"GIT_DELTA_COPIED","","",null,null],[17,"GIT_DELTA_IGNORED","","",null,null],[17,"GIT_DELTA_UNTRACKED","","",null,null],[17,"GIT_DELTA_TYPECHANGE","","",null,null],[17,"GIT_DELTA_UNREADABLE","","",null,null],[17,"GIT_DELTA_CONFLICTED","","",null,null],[17,"GIT_CHECKOUT_NONE","","",null,null],[17,"GIT_CHECKOUT_SAFE","","",null,null],[17,"GIT_CHECKOUT_FORCE","","",null,null],[17,"GIT_CHECKOUT_RECREATE_MISSING","","",null,null],[17,"GIT_CHECKOUT_ALLOW_CONFLICTS","","",null,null],[17,"GIT_CHECKOUT_REMOVE_UNTRACKED","","",null,null],[17,"GIT_CHECKOUT_REMOVE_IGNORED","","",null,null],[17,"GIT_CHECKOUT_UPDATE_ONLY","","",null,null],[17,"GIT_CHECKOUT_DONT_UPDATE_INDEX","","",null,null],[17,"GIT_CHECKOUT_NO_REFRESH","","",null,null],[17,"GIT_CHECKOUT_SKIP_UNMERGED","","",null,null],[17,"GIT_CHECKOUT_USE_OURS","","",null,null],[17,"GIT_CHECKOUT_USE_THEIRS","","",null,null],[17,"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES","","",null,null],[17,"GIT_CHECKOUT_DONT_OVERWRITE_IGNORED","","",null,null],[17,"GIT_CHECKOUT_CONFLICT_STYLE_MERGE","","",null,null],[17,"GIT_CHECKOUT_CONFLICT_STYLE_DIFF3","","",null,null],[17,"GIT_CHECKOUT_UPDATE_SUBMODULES","","",null,null],[17,"GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED","","",null,null],[17,"GIT_RESET_SOFT","","",null,null],[17,"GIT_RESET_MIXED","","",null,null],[17,"GIT_RESET_HARD","","",null,null],[17,"GIT_OBJ_ANY","","",null,null],[17,"GIT_OBJ_BAD","","",null,null],[17,"GIT_OBJ__EXT1","","",null,null],[17,"GIT_OBJ_COMMIT","","",null,null],[17,"GIT_OBJ_TREE","","",null,null],[17,"GIT_OBJ_BLOB","","",null,null],[17,"GIT_OBJ_TAG","","",null,null],[17,"GIT_OBJ__EXT2","","",null,null],[17,"GIT_OBJ_OFS_DELTA","","",null,null],[17,"GIT_OBJ_REF_DELTA","","",null,null],[17,"GIT_REF_INVALID","","",null,null],[17,"GIT_REF_OID","","",null,null],[17,"GIT_REF_SYMBOLIC","","",null,null],[17,"GIT_REF_LISTALL","","",null,null],[17,"GIT_FILEMODE_UNREADABLE","","",null,null],[17,"GIT_FILEMODE_TREE","","",null,null],[17,"GIT_FILEMODE_BLOB","","",null,null],[17,"GIT_FILEMODE_BLOB_EXECUTABLE","","",null,null],[17,"GIT_FILEMODE_LINK","","",null,null],[17,"GIT_FILEMODE_COMMIT","","",null,null],[17,"GIT_TREEWALK_PRE","","",null,null],[17,"GIT_TREEWALK_POST","","",null,null],[17,"GIT_BRANCH_LOCAL","","",null,null],[17,"GIT_BRANCH_REMOTE","","",null,null],[17,"GIT_BRANCH_ALL","","",null,null],[17,"GIT_BLAME_NORMAL","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_SAME_FILE","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES","","",null,null],[17,"GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES","","",null,null],[17,"GIT_BLAME_FIRST_PARENT","","",null,null],[17,"GIT_IDXENTRY_INTENT_TO_ADD","","",null,null],[17,"GIT_IDXENTRY_SKIP_WORKTREE","","",null,null],[17,"GIT_IDXENTRY_EXTENDED2","","",null,null],[17,"GIT_IDXENTRY_UPDATE","","",null,null],[17,"GIT_IDXENTRY_REMOVE","","",null,null],[17,"GIT_IDXENTRY_UPTODATE","","",null,null],[17,"GIT_IDXENTRY_ADDED","","",null,null],[17,"GIT_IDXENTRY_HASHED","","",null,null],[17,"GIT_IDXENTRY_UNHASHED","","",null,null],[17,"GIT_IDXENTRY_WT_REMOVE","","",null,null],[17,"GIT_IDXENTRY_CONFLICTED","","",null,null],[17,"GIT_IDXENTRY_UNPACKED","","",null,null],[17,"GIT_IDXENTRY_NEW_SKIP_WORKTREE","","",null,null],[17,"GIT_IDXENTRY_EXTENDED","","",null,null],[17,"GIT_IDXENTRY_VALID","","",null,null],[17,"GIT_IDXENTRY_NAMEMASK","","",null,null],[17,"GIT_IDXENTRY_STAGEMASK","","",null,null],[17,"GIT_IDXENTRY_STAGESHIFT","","",null,null],[17,"GIT_CONFIG_LEVEL_PROGRAMDATA","","",null,null],[17,"GIT_CONFIG_LEVEL_SYSTEM","","",null,null],[17,"GIT_CONFIG_LEVEL_XDG","","",null,null],[17,"GIT_CONFIG_LEVEL_GLOBAL","","",null,null],[17,"GIT_CONFIG_LEVEL_LOCAL","","",null,null],[17,"GIT_CONFIG_LEVEL_APP","","",null,null],[17,"GIT_CONFIG_HIGHEST_LEVEL","","",null,null],[17,"GIT_SUBMODULE_UPDATE_CHECKOUT","","",null,null],[17,"GIT_SUBMODULE_UPDATE_REBASE","","",null,null],[17,"GIT_SUBMODULE_UPDATE_MERGE","","",null,null],[17,"GIT_SUBMODULE_UPDATE_NONE","","",null,null],[17,"GIT_SUBMODULE_UPDATE_DEFAULT","","",null,null],[17,"GIT_SUBMODULE_IGNORE_UNSPECIFIED","","",null,null],[17,"GIT_SUBMODULE_IGNORE_NONE","","",null,null],[17,"GIT_SUBMODULE_IGNORE_UNTRACKED","","",null,null],[17,"GIT_SUBMODULE_IGNORE_DIRTY","","",null,null],[17,"GIT_SUBMODULE_IGNORE_ALL","","",null,null],[17,"GIT_CREDTYPE_USERPASS_PLAINTEXT","","",null,null],[17,"GIT_CREDTYPE_SSH_KEY","","",null,null],[17,"GIT_CREDTYPE_SSH_CUSTOM","","",null,null],[17,"GIT_CREDTYPE_DEFAULT","","",null,null],[17,"GIT_CREDTYPE_SSH_INTERACTIVE","","",null,null],[17,"GIT_CREDTYPE_USERNAME","","",null,null],[17,"GIT_CREDTYPE_SSH_MEMORY","","",null,null],[17,"GIT_INDEX_ADD_DEFAULT","","",null,null],[17,"GIT_INDEX_ADD_FORCE","","",null,null],[17,"GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"GIT_INDEX_ADD_CHECK_PATHSPEC","","",null,null],[17,"GIT_REPOSITORY_OPEN_NO_SEARCH","","",null,null],[17,"GIT_REPOSITORY_OPEN_CROSS_FS","","",null,null],[17,"GIT_REPOSITORY_OPEN_BARE","","",null,null],[17,"GIT_REPOSITORY_OPEN_NO_DOTGIT","","",null,null],[17,"GIT_REPOSITORY_OPEN_FROM_ENV","","",null,null],[17,"GIT_REPOSITORY_INIT_OPTIONS_VERSION","","",null,null],[17,"GIT_REPOSITORY_INIT_BARE","","",null,null],[17,"GIT_REPOSITORY_INIT_NO_REINIT","","",null,null],[17,"GIT_REPOSITORY_INIT_NO_DOTGIT_DIR","","",null,null],[17,"GIT_REPOSITORY_INIT_MKDIR","","",null,null],[17,"GIT_REPOSITORY_INIT_MKPATH","","",null,null],[17,"GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE","","",null,null],[17,"GIT_REPOSITORY_INIT_SHARED_UMASK","","",null,null],[17,"GIT_REPOSITORY_INIT_SHARED_GROUP","","",null,null],[17,"GIT_REPOSITORY_INIT_SHARED_ALL","","",null,null],[17,"GIT_SORT_NONE","","",null,null],[17,"GIT_SORT_TOPOLOGICAL","","",null,null],[17,"GIT_SORT_TIME","","",null,null],[17,"GIT_SORT_REVERSE","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_HEAD","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_INDEX","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_CONFIG","","",null,null],[17,"GIT_SUBMODULE_STATUS_IN_WD","","",null,null],[17,"GIT_SUBMODULE_STATUS_INDEX_ADDED","","",null,null],[17,"GIT_SUBMODULE_STATUS_INDEX_DELETED","","",null,null],[17,"GIT_SUBMODULE_STATUS_INDEX_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_UNINITIALIZED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_ADDED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_DELETED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_WD_MODIFIED","","",null,null],[17,"GIT_SUBMODULE_STATUS_WD_UNTRACKED","","",null,null],[17,"GIT_PATHSPEC_DEFAULT","","",null,null],[17,"GIT_PATHSPEC_IGNORE_CASE","","",null,null],[17,"GIT_PATHSPEC_USE_CASE","","",null,null],[17,"GIT_PATHSPEC_NO_GLOB","","",null,null],[17,"GIT_PATHSPEC_NO_MATCH_ERROR","","",null,null],[17,"GIT_PATHSPEC_FIND_FAILURES","","",null,null],[17,"GIT_PATHSPEC_FAILURES_ONLY","","",null,null],[17,"GIT_DIFF_LINE_CONTEXT","","",null,null],[17,"GIT_DIFF_LINE_ADDITION","","",null,null],[17,"GIT_DIFF_LINE_DELETION","","",null,null],[17,"GIT_DIFF_LINE_CONTEXT_EOFNL","","",null,null],[17,"GIT_DIFF_LINE_ADD_EOFNL","","",null,null],[17,"GIT_DIFF_LINE_DEL_EOFNL","","",null,null],[17,"GIT_DIFF_LINE_FILE_HDR","","",null,null],[17,"GIT_DIFF_LINE_HUNK_HDR","","",null,null],[17,"GIT_DIFF_LINE_BINARY","","",null,null],[17,"GIT_DIFF_FORMAT_PATCH","","",null,null],[17,"GIT_DIFF_FORMAT_PATCH_HEADER","","",null,null],[17,"GIT_DIFF_FORMAT_RAW","","",null,null],[17,"GIT_DIFF_FORMAT_NAME_ONLY","","",null,null],[17,"GIT_DIFF_FORMAT_NAME_STATUS","","",null,null],[17,"GIT_DIFF_STATS_NONE","","",null,null],[17,"GIT_DIFF_STATS_FULL","","",null,null],[17,"GIT_DIFF_STATS_SHORT","","",null,null],[17,"GIT_DIFF_STATS_NUMBER","","",null,null],[17,"GIT_DIFF_STATS_INCLUDE_SUMMARY","","",null,null],[17,"GIT_DIFF_NORMAL","","",null,null],[17,"GIT_DIFF_REVERSE","","",null,null],[17,"GIT_DIFF_INCLUDE_IGNORED","","",null,null],[17,"GIT_DIFF_RECURSE_IGNORED_DIRS","","",null,null],[17,"GIT_DIFF_INCLUDE_UNTRACKED","","",null,null],[17,"GIT_DIFF_RECURSE_UNTRACKED_DIRS","","",null,null],[17,"GIT_DIFF_INCLUDE_UNMODIFIED","","",null,null],[17,"GIT_DIFF_INCLUDE_TYPECHANGE","","",null,null],[17,"GIT_DIFF_INCLUDE_TYPECHANGE_TREES","","",null,null],[17,"GIT_DIFF_IGNORE_FILEMODE","","",null,null],[17,"GIT_DIFF_IGNORE_SUBMODULES","","",null,null],[17,"GIT_DIFF_IGNORE_CASE","","",null,null],[17,"GIT_DIFF_DISABLE_PATHSPEC_MATCH","","",null,null],[17,"GIT_DIFF_SKIP_BINARY_CHECK","","",null,null],[17,"GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS","","",null,null],[17,"GIT_DIFF_UPDATE_INDEX","","",null,null],[17,"GIT_DIFF_INCLUDE_UNREADABLE","","",null,null],[17,"GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED","","",null,null],[17,"GIT_DIFF_FORCE_TEXT","","",null,null],[17,"GIT_DIFF_FORCE_BINARY","","",null,null],[17,"GIT_DIFF_IGNORE_WHITESPACE","","",null,null],[17,"GIT_DIFF_IGNORE_WHITESPACE_CHANGE","","",null,null],[17,"GIT_DIFF_IGNORE_WHITESPACE_EOL","","",null,null],[17,"GIT_DIFF_SHOW_UNTRACKED_CONTENT","","",null,null],[17,"GIT_DIFF_SHOW_UNMODIFIED","","",null,null],[17,"GIT_DIFF_PATIENCE","","",null,null],[17,"GIT_DIFF_MINIMAL","","",null,null],[17,"GIT_DIFF_SHOW_BINARY","","",null,null],[17,"GIT_DIFF_INDENT_HEURISTIC","","",null,null],[17,"GIT_DIFF_FIND_OPTIONS_VERSION","","",null,null],[17,"GIT_DIFF_FIND_BY_CONFIG","","",null,null],[17,"GIT_DIFF_FIND_RENAMES","","",null,null],[17,"GIT_DIFF_FIND_RENAMES_FROM_REWRITES","","",null,null],[17,"GIT_DIFF_FIND_COPIES","","",null,null],[17,"GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED","","",null,null],[17,"GIT_DIFF_FIND_REWRITES","","",null,null],[17,"GIT_DIFF_BREAK_REWRITES","","",null,null],[17,"GIT_DIFF_FIND_AND_BREAK_REWRITES","","",null,null],[17,"GIT_DIFF_FIND_FOR_UNTRACKED","","",null,null],[17,"GIT_DIFF_FIND_ALL","","",null,null],[17,"GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE","","",null,null],[17,"GIT_DIFF_FIND_IGNORE_WHITESPACE","","",null,null],[17,"GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE","","",null,null],[17,"GIT_DIFF_FIND_EXACT_MATCH_ONLY","","",null,null],[17,"GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY","","",null,null],[17,"GIT_DIFF_FIND_REMOVE_UNMODIFIED","","",null,null],[17,"GIT_DIFF_BINARY_NONE","","",null,null],[17,"GIT_DIFF_BINARY_LITERAL","","",null,null],[17,"GIT_DIFF_BINARY_DELTA","","",null,null],[17,"GIT_MERGE_FIND_RENAMES","","",null,null],[17,"GIT_MERGE_FAIL_ON_CONFLICT","","",null,null],[17,"GIT_MERGE_SKIP_REUC","","",null,null],[17,"GIT_MERGE_NO_RECURSIVE","","",null,null],[17,"GIT_MERGE_FILE_FAVOR_NORMAL","","",null,null],[17,"GIT_MERGE_FILE_FAVOR_OURS","","",null,null],[17,"GIT_MERGE_FILE_FAVOR_THEIRS","","",null,null],[17,"GIT_MERGE_FILE_FAVOR_UNION","","",null,null],[17,"GIT_MERGE_FILE_DEFAULT","","",null,null],[17,"GIT_MERGE_FILE_STYLE_MERGE","","",null,null],[17,"GIT_MERGE_FILE_STYLE_DIFF3","","",null,null],[17,"GIT_MERGE_FILE_SIMPLIFY_ALNUM","","",null,null],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE","","",null,null],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE_CHANGE","","",null,null],[17,"GIT_MERGE_FILE_IGNORE_WHITESPACE_EOL","","",null,null],[17,"GIT_MERGE_FILE_DIFF_PATIENCE","","",null,null],[17,"GIT_MERGE_FILE_DIFF_MINIMAL","","",null,null],[17,"GIT_MERGE_ANALYSIS_NONE","","",null,null],[17,"GIT_MERGE_ANALYSIS_NORMAL","","",null,null],[17,"GIT_MERGE_ANALYSIS_UP_TO_DATE","","",null,null],[17,"GIT_MERGE_ANALYSIS_FASTFORWARD","","",null,null],[17,"GIT_MERGE_ANALYSIS_UNBORN","","",null,null],[17,"GIT_MERGE_PREFERENCE_NONE","","",null,null],[17,"GIT_MERGE_PREFERENCE_NO_FASTFORWARD","","",null,null],[17,"GIT_MERGE_PREFERENCE_FASTFORWARD_ONLY","","",null,null],[17,"GIT_PROXY_NONE","","",null,null],[17,"GIT_PROXY_AUTO","","",null,null],[17,"GIT_PROXY_SPECIFIED","","",null,null],[17,"GIT_SERVICE_UPLOADPACK_LS","","",null,null],[17,"GIT_SERVICE_UPLOADPACK","","",null,null],[17,"GIT_SERVICE_RECEIVEPACK_LS","","",null,null],[17,"GIT_SERVICE_RECEIVEPACK","","",null,null],[17,"GIT_DESCRIBE_DEFAULT","","",null,null],[17,"GIT_DESCRIBE_TAGS","","",null,null],[17,"GIT_DESCRIBE_ALL","","",null,null],[17,"GIT_PACKBUILDER_ADDING_OBJECTS","","",null,null],[17,"GIT_PACKBUILDER_DELTAFICATION","","",null,null],[17,"GIT_STASH_DEFAULT","","",null,null],[17,"GIT_STASH_KEEP_INDEX","","",null,null],[17,"GIT_STASH_INCLUDE_UNTRACKED","","",null,null],[17,"GIT_STASH_INCLUDE_IGNORED","","",null,null],[17,"GIT_STASH_APPLY_DEFAULT","","",null,null],[17,"GIT_STASH_APPLY_REINSTATE_INDEX","","",null,null],[17,"GIT_STASH_APPLY_PROGRESS_NONE","","",null,null],[17,"GIT_STASH_APPLY_PROGRESS_LOADING_STASH","","",null,null],[17,"GIT_STASH_APPLY_PROGRESS_ANALYZE_INDEX","","",null,null],[17,"GIT_STASH_APPLY_PROGRESS_ANALYZE_MODIFIED","","",null,null],[17,"GIT_STASH_APPLY_PROGRESS_ANALYZE_UNTRACKED","","",null,null],[17,"GIT_STASH_APPLY_PROGRESS_CHECKOUT_UNTRACKED","","",null,null],[17,"GIT_STASH_APPLY_PROGRESS_CHECKOUT_MODIFIED","","",null,null],[17,"GIT_STASH_APPLY_PROGRESS_DONE","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"git_oid"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"git_strarray"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"git_oidarray"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"git_time"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"git_time"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"git_time"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"git_transfer_progress"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"git_buf"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"git_blame_options"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"git_blame_hunk"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"git_index_entry"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"git_index_time"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"git_index_time"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"git_index_time"}],"output":{"name":"bool"}}]],"paths":[[3,"git_revspec"],[3,"git_error"],[3,"git_oid"],[3,"git_strarray"],[3,"git_oidarray"],[3,"git_signature"],[3,"git_time"],[3,"git_clone_options"],[3,"git_checkout_options"],[3,"git_checkout_perfdata"],[3,"git_remote_callbacks"],[3,"git_fetch_options"],[3,"git_push_update"],[3,"git_cert"],[3,"git_cert_hostkey"],[3,"git_cert_x509"],[3,"git_transfer_progress"],[3,"git_diff_file"],[3,"git_status_options"],[3,"git_diff_delta"],[3,"git_status_entry"],[3,"git_buf"],[3,"git_blame_options"],[3,"git_blame_hunk"],[3,"git_index_entry"],[3,"git_index_time"],[3,"git_config_entry"],[3,"git_submodule_update_options"],[3,"git_writestream"],[3,"git_cred"],[3,"git_push_options"],[3,"git_repository_init_options"],[3,"git_remote_head"],[3,"git_diff_hunk"],[3,"git_diff_line"],[3,"git_diff_options"],[3,"git_diff_find_options"],[3,"git_diff_similarity_metric"],[3,"git_diff_binary"],[3,"git_diff_binary_file"],[3,"git_merge_options"],[3,"git_transport"],[3,"git_odb_backend"],[3,"git_refdb_backend"],[3,"git_proxy_options"],[3,"git_smart_subtransport_stream"],[3,"git_smart_subtransport"],[3,"git_smart_subtransport_definition"],[3,"git_describe_options"],[3,"git_describe_format_options"],[3,"git_stash_apply_options"]]};
initSearch(searchIndex);
